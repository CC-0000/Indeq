name: Deploy to Amazon EKS

on:
  push:
    branches:
      - cicd  # Trigger deployment on the cicd branch

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: backend-cluster
  ECR_REPOSITORY_NAMESPACE: indeq
  IMAGE_TAG: ${{ github.run_id }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # For OIDC auth (recommended)
      contents: read

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build images with Docker Compose
      run: |
        docker-compose build

    - name: Tag and Push images to ECR
      run: |
        cd backend
        # Loop through each service defined in the docker-compose.yml
        for service in $(docker-compose config --services); do
          if [[ "$service" != "passwordDB" && "$service" != "ollama" ]]; then # ollama and db is not pushed to ECR
              # Tag the image
              docker tag $service:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAMESPACE/$service:$IMAGE_TAG
              # Push the image to ECR
              docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY_NAMESPACE/$service:$IMAGE_TAG
          fi
        done

    - name: Create config.yaml with GitHub secrets
      run: |
        echo "apiVersion: v1
        kind: ConfigMap
        metadata:
          name: backend-config
        data:
          AUTH_PORT: \"\${{ secrets.AUTH_PORT }}\"
          AUTH_ADDRESS: \"\${{ secrets.AUTH_ADDRESS }}\"
          QUERY_PORT: \"\${{ secrets.QUERY_PORT }}\"
          QUERY_ADDRESS: \"\${{ secrets.QUERY_ADDRESS }}\"
          VECTOR_PORT: \"\${{ secrets.VECTOR_PORT }}\"
          VECTOR_ADDRESS: \"\${{ secrets.VECTOR_ADDRESS }}\"
          GATEWAY_ADDRESS: \"\${{ secrets.GATEWAY_ADDRESS }}\"
          DATABASE_URL: \"\${{ secrets.DATABASE_URL }}\"
          POSTGRES_USER: \"\${{ secrets.POSTGRES_USER }}\"
          POSTGRES_PASSWORD: \"\${{ secrets.POSTGRES_PASSWORD }}\"
          POSTGRES_DB: \"\${{ secrets.POSTGRES_DB }}\"
          JWT_SECRET: \"\${{ secrets.JWT_SECRET }}\"
          ARGON2_MEMORY: \"\${{ secrets.ARGON2_MEMORY }}\"
          ARGON2_ITERATIONS: \"\${{ secrets.ARGON2_ITERATIONS }}\"
          ARGON2_PARALLELISM: \"\${{ secrets.ARGON2_PARALLELISM }}\"
          ARGON2_SALT_LENGTH: \"\${{ secrets.ARGON2_SALT_LENGTH }}\"
          ARGON2_KEY_LENGTH: \"\${{ secrets.ARGON2_KEY_LENGTH }}\"
          MIN_PASSWORD_LENGTH: \"\${{ secrets.MIN_PASSWORD_LENGTH }}\"
          MAX_PASSWORD_LENGTH: \"\${{ secrets.MAX_PASSWORD_LENGTH }}\"
          MAX_EMAIL_LENGTH: \"\${{ secrets.MAX_EMAIL_LENGTH }}\"
          RABBITMQ_URL: \"\${{ secrets.RABBITMQ_URL }}\"
          RABBITMQ_DEFAULT_USER: \"\${{ secrets.RABBITMQ_DEFAULT_USER }}\"
          RABBITMQ_DEFAULT_PASS: \"\${{ secrets.RABBITMQ_DEFAULT_PASS }}\"
          RABBITMQ_LOGS: \"\${{ secrets.RABBITMQ_LOGS }}\"
          OLLAMA_URL: \"\${{ secrets.OLLAMA_URL }}\"
          LLM_MODEL: \"\${{ secrets.LLM_MODEL }}\"
          ZILLIZ_ADDRESS: \"\${{ secrets.ZILLIZ_ADDRESS }}\"
          ZILLIZ_API_KEY: \"\${{ secrets.ZILLIZ_API_KEY }}\"
          CA_CRT: \"\${{ secrets.CA_CRT }}\"
          QUERY_CRT: \"\${{ secrets.QUERY_CRT }}\"
          QUERY_KEY: \"\${{ secrets.QUERY_KEY }}\"
          AUTH_CRT: \"\${{ secrets.AUTH_CRT }}\"
          AUTH_KEY: \"\${{ secrets.AUTH_KEY }}\"
          ALLOWED_CLIENT_IP: \"\${{ secrets.ALLOWED_CLIENT_IP }}\"
        " > configmap.yaml

    - name: Configure kubectl
      run: |
        aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy to EKS
      run: |
        kubectl apply -f backend/k8s-manifest.yml
        kubectl apply -f configmap.yaml
