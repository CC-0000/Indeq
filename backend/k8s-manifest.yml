# Ingress

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: indeq-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /gateway
        pathType: Prefix
        backend:
          service:
            name: gateway-service
            port:
              number: 8080
      - path: /query
        pathType: Prefix
        backend:
          service:
            name: query-service
            port:
              number: 8080
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: authentication-service
            port:
              number: 8080
      - path: /ollama
        pathType: Prefix
        backend:
          service:
            name: ollama-service
            port:
              number: 11434

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  POSTGRES_USER: your_user
  POSTGRES_DB: your_db
  POSTGRES_PASSWORD: your_password

---
# Gateway Service
apiVersion: v1
kind: Service
metadata:
  name: gateway-service
spec:
  selector:
    app: gateway
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway
  template:
    metadata:
      labels:
        app: gateway
    spec:
      containers:
      - name: gateway
        image: gateway-service
        # imagePullPolicy: Never
        ports:
        - containerPort: 8080

---
# Query Service
apiVersion: v1
kind: Service
metadata:
  name: query-service
spec:
  selector:
    app: query
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: query-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: query
  template:
    metadata:
      labels:
        app: query
    spec:
      containers:
      - name: query
        image: query-service
        # imagePullPolicy: Never
        ports:
        - containerPort: 8080

---
# Authentication Service
apiVersion: v1
kind: Service
metadata:
  name: authentication-service
spec:
  selector:
    app: authentication
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentication-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: authentication
  template:
    metadata:
      labels:
        app: authentication
    spec:
      containers:
      - name: authentication
        image: authentication-service
        # imagePullPolicy: Never
        ports:
        - containerPort: 8080

---
# Ollama Service
apiVersion: v1
kind: Service
metadata:
  name: ollama-service
spec:
  selector:
    app: ollama
  ports:
    - port: 11434
      targetPort: 11434
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ollama-deployment
spec:
  replicas: 1  # Single replica since this is a stateful workload
  selector:
    matchLabels:
      app: ollama
  template:
    metadata:
      labels:
        app: ollama
    spec:
      containers:
      - name: ollama
        image: ollama/ollama:latest
        # imagePullPolicy: Never
        ports:
        - containerPort: 11434
        resources:
          limits:
            memory: "16Gi"
        env:
        - name: OLLAMA_NUM_PARALLEL
          value: "4"
        volumeMounts:
        - name: ollama-models
          mountPath: /root/.ollama
      volumes:
      - name: ollama-models
        emptyDir: {}

---
# RabbitMQ Service
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  selector:
    app: rabbitmq
  ports:
    - name: amqp
      port: 5672
      targetPort: 5672
    - name: management
      port: 15672
      targetPort: 15672
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-deployment
spec:
  replicas: 1  # Single replica since this is a stateful workload
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:3-management
        # imagePullPolicy: Never
        ports:
        - containerPort: 5672
        - containerPort: 15672
        volumeMounts:
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq
      volumes:
      - name: rabbitmq-data
        emptyDir: {}

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1  # Single replica since this is a stateful workload
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        # imagePullPolicy: Never
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        envFrom:
        - configMapRef:
            name: backend-config  # Reference the ConfigMap here
      volumes:
      - name: postgres-data
        emptyDir: {}

