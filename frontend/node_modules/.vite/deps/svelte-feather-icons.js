import "./chunk-OF4EBAGI.js";
import "./chunk-RIXFT5AQ.js";
import {
  add_locations,
  check_target,
  hmr,
  init,
  legacy_api,
  prop,
  set_attribute,
  set_class
} from "./chunk-OJR6KFYM.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  ns_template
} from "./chunk-BY6WLUCV.js";
import {
  FILENAME,
  HMR,
  mark_module_end,
  mark_module_start,
  pop,
  push,
  set,
  strict_equals,
  template_effect
} from "./chunk-WZ7WN4W3.js";
import "./chunk-NUQPLINK.js";
import "./chunk-HNWPC2PS.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-3F74YA3Z.js";

// node_modules/svelte-feather-icons/src/icons/ActivityIcon.svelte
mark_module_start();
ActivityIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ActivityIcon.svelte";
var root = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline></svg>`), ActivityIcon[FILENAME], [[14, 0, [[14, 245]]]]);
function ActivityIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ActivityIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-activity ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ActivityIcon = hmr(ActivityIcon, () => ActivityIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ActivityIcon[HMR].source;
    set(ActivityIcon[HMR].source, module.default[HMR].original);
  });
}
var ActivityIcon_default = ActivityIcon;
mark_module_end(ActivityIcon);

// node_modules/svelte-feather-icons/src/icons/AirplayIcon.svelte
mark_module_start();
AirplayIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AirplayIcon.svelte";
var root2 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"></path><polygon points="12 15 17 21 7 21 12 15"></polygon></svg>`), AirplayIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 336]]]
]);
function AirplayIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AirplayIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root2();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-airplay ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AirplayIcon = hmr(AirplayIcon, () => AirplayIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AirplayIcon[HMR].source;
    set(AirplayIcon[HMR].source, module.default[HMR].original);
  });
}
var AirplayIcon_default = AirplayIcon;
mark_module_end(AirplayIcon);

// node_modules/svelte-feather-icons/src/icons/AlertCircleIcon.svelte
mark_module_start();
AlertCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AlertCircleIcon.svelte";
var root3 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>`), AlertCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 249], [14, 289], [14, 333]]
  ]
]);
function AlertCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AlertCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root3();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-alert-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlertCircleIcon = hmr(AlertCircleIcon, () => AlertCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlertCircleIcon[HMR].source;
    set(AlertCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var AlertCircleIcon_default = AlertCircleIcon;
mark_module_end(AlertCircleIcon);

// node_modules/svelte-feather-icons/src/icons/AlertOctagonIcon.svelte
mark_module_start();
AlertOctagonIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AlertOctagonIcon.svelte";
var root4 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>`), AlertOctagonIcon[FILENAME], [
  [
    14,
    0,
    [[14, 250], [14, 349], [14, 393]]
  ]
]);
function AlertOctagonIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AlertOctagonIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root4();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-alert-octagon ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlertOctagonIcon = hmr(AlertOctagonIcon, () => AlertOctagonIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlertOctagonIcon[HMR].source;
    set(AlertOctagonIcon[HMR].source, module.default[HMR].original);
  });
}
var AlertOctagonIcon_default = AlertOctagonIcon;
mark_module_end(AlertOctagonIcon);

// node_modules/svelte-feather-icons/src/icons/AlertTriangleIcon.svelte
mark_module_start();
AlertTriangleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AlertTriangleIcon.svelte";
var root5 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>`), AlertTriangleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 251], [14, 357], [14, 401]]
  ]
]);
function AlertTriangleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AlertTriangleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root5();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-alert-triangle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlertTriangleIcon = hmr(AlertTriangleIcon, () => AlertTriangleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlertTriangleIcon[HMR].source;
    set(AlertTriangleIcon[HMR].source, module.default[HMR].original);
  });
}
var AlertTriangleIcon_default = AlertTriangleIcon;
mark_module_end(AlertTriangleIcon);

// node_modules/svelte-feather-icons/src/icons/AlignCenterIcon.svelte
mark_module_start();
AlignCenterIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AlignCenterIcon.svelte";
var root6 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="10" x2="6" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="18" y1="18" x2="6" y2="18"></line></svg>`), AlignCenterIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 249],
      [14, 293],
      [14, 335],
      [14, 379]
    ]
  ]
]);
function AlignCenterIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AlignCenterIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root6();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-align-center ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignCenterIcon = hmr(AlignCenterIcon, () => AlignCenterIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignCenterIcon[HMR].source;
    set(AlignCenterIcon[HMR].source, module.default[HMR].original);
  });
}
var AlignCenterIcon_default = AlignCenterIcon;
mark_module_end(AlignCenterIcon);

// node_modules/svelte-feather-icons/src/icons/AlignJustifyIcon.svelte
mark_module_start();
AlignJustifyIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AlignJustifyIcon.svelte";
var root7 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="21" y1="10" x2="3" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="21" y1="18" x2="3" y2="18"></line></svg>`), AlignJustifyIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 250],
      [14, 294],
      [14, 336],
      [14, 380]
    ]
  ]
]);
function AlignJustifyIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AlignJustifyIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root7();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-align-justify ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignJustifyIcon = hmr(AlignJustifyIcon, () => AlignJustifyIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignJustifyIcon[HMR].source;
    set(AlignJustifyIcon[HMR].source, module.default[HMR].original);
  });
}
var AlignJustifyIcon_default = AlignJustifyIcon;
mark_module_end(AlignJustifyIcon);

// node_modules/svelte-feather-icons/src/icons/AlignLeftIcon.svelte
mark_module_start();
AlignLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AlignLeftIcon.svelte";
var root8 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="17" y1="10" x2="3" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="17" y1="18" x2="3" y2="18"></line></svg>`), AlignLeftIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 247],
      [14, 291],
      [14, 333],
      [14, 377]
    ]
  ]
]);
function AlignLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AlignLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root8();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-align-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignLeftIcon = hmr(AlignLeftIcon, () => AlignLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignLeftIcon[HMR].source;
    set(AlignLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var AlignLeftIcon_default = AlignLeftIcon;
mark_module_end(AlignLeftIcon);

// node_modules/svelte-feather-icons/src/icons/AlignRightIcon.svelte
mark_module_start();
AlignRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AlignRightIcon.svelte";
var root9 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="21" y1="10" x2="7" y2="10"></line><line x1="21" y1="6" x2="3" y2="6"></line><line x1="21" y1="14" x2="3" y2="14"></line><line x1="21" y1="18" x2="7" y2="18"></line></svg>`), AlignRightIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 248],
      [14, 292],
      [14, 334],
      [14, 378]
    ]
  ]
]);
function AlignRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AlignRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root9();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-align-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AlignRightIcon = hmr(AlignRightIcon, () => AlignRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AlignRightIcon[HMR].source;
    set(AlignRightIcon[HMR].source, module.default[HMR].original);
  });
}
var AlignRightIcon_default = AlignRightIcon;
mark_module_end(AlignRightIcon);

// node_modules/svelte-feather-icons/src/icons/AnchorIcon.svelte
mark_module_start();
AnchorIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AnchorIcon.svelte";
var root10 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="5" r="3"></circle><line x1="12" y1="22" x2="12" y2="8"></line><path d="M5 12H2a10 10 0 0 0 20 0h-3"></path></svg>`), AnchorIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 281], [14, 325]]
  ]
]);
function AnchorIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AnchorIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root10();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-anchor ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AnchorIcon = hmr(AnchorIcon, () => AnchorIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AnchorIcon[HMR].source;
    set(AnchorIcon[HMR].source, module.default[HMR].original);
  });
}
var AnchorIcon_default = AnchorIcon;
mark_module_end(AnchorIcon);

// node_modules/svelte-feather-icons/src/icons/ApertureIcon.svelte
mark_module_start();
ApertureIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ApertureIcon.svelte";
var root11 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="14.31" y1="8" x2="20.05" y2="17.94"></line><line x1="9.69" y1="8" x2="21.17" y2="8"></line><line x1="7.38" y1="12" x2="13.12" y2="2.06"></line><line x1="9.69" y1="16" x2="3.95" y2="6.06"></line><line x1="14.31" y1="16" x2="2.83" y2="16"></line><line x1="16.62" y1="12" x2="10.88" y2="21.94"></line></svg>`), ApertureIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 245],
      [14, 285],
      [14, 338],
      [14, 386],
      [14, 438],
      [14, 489],
      [14, 539]
    ]
  ]
]);
function ApertureIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ApertureIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root11();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-aperture ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ApertureIcon = hmr(ApertureIcon, () => ApertureIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ApertureIcon[HMR].source;
    set(ApertureIcon[HMR].source, module.default[HMR].original);
  });
}
var ApertureIcon_default = ApertureIcon;
mark_module_end(ApertureIcon);

// node_modules/svelte-feather-icons/src/icons/ArchiveIcon.svelte
mark_module_start();
ArchiveIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArchiveIcon.svelte";
var root12 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="21 8 21 21 3 21 3 8"></polyline><rect x="1" y="3" width="22" height="5"></rect><line x1="10" y1="12" x2="14" y2="12"></line></svg>`), ArchiveIcon[FILENAME], [
  [
    14,
    0,
    [[14, 244], [14, 294], [14, 341]]
  ]
]);
function ArchiveIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArchiveIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root12();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-archive ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArchiveIcon = hmr(ArchiveIcon, () => ArchiveIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArchiveIcon[HMR].source;
    set(ArchiveIcon[HMR].source, module.default[HMR].original);
  });
}
var ArchiveIcon_default = ArchiveIcon;
mark_module_end(ArchiveIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowDownCircleIcon.svelte
mark_module_start();
ArrowDownCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowDownCircleIcon.svelte";
var root13 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="8 12 12 16 16 12"></polyline><line x1="12" y1="8" x2="12" y2="16"></line></svg>`), ArrowDownCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 254], [14, 294], [14, 341]]
  ]
]);
function ArrowDownCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowDownCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root13();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-down-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownCircleIcon = hmr(ArrowDownCircleIcon, () => ArrowDownCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownCircleIcon[HMR].source;
    set(ArrowDownCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownCircleIcon_default = ArrowDownCircleIcon;
mark_module_end(ArrowDownCircleIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowDownLeftIcon.svelte
mark_module_start();
ArrowDownLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowDownLeftIcon.svelte";
var root14 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="17" y1="7" x2="7" y2="17"></line><polyline points="17 17 7 17 7 7"></polyline></svg>`), ArrowDownLeftIcon[FILENAME], [
  [14, 0, [[14, 252], [14, 295]]]
]);
function ArrowDownLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowDownLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root14();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-down-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownLeftIcon = hmr(ArrowDownLeftIcon, () => ArrowDownLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownLeftIcon[HMR].source;
    set(ArrowDownLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownLeftIcon_default = ArrowDownLeftIcon;
mark_module_end(ArrowDownLeftIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowDownRightIcon.svelte
mark_module_start();
ArrowDownRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowDownRightIcon.svelte";
var root15 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="7" y1="7" x2="17" y2="17"></line><polyline points="17 7 17 17 7 17"></polyline></svg>`), ArrowDownRightIcon[FILENAME], [
  [14, 0, [[14, 253], [14, 296]]]
]);
function ArrowDownRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowDownRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root15();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-down-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownRightIcon = hmr(ArrowDownRightIcon, () => ArrowDownRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownRightIcon[HMR].source;
    set(ArrowDownRightIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownRightIcon_default = ArrowDownRightIcon;
mark_module_end(ArrowDownRightIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowDownIcon.svelte
mark_module_start();
ArrowDownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowDownIcon.svelte";
var root16 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><polyline points="19 12 12 19 5 12"></polyline></svg>`), ArrowDownIcon[FILENAME], [
  [14, 0, [[14, 247], [14, 291]]]
]);
function ArrowDownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowDownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root16();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-down ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowDownIcon = hmr(ArrowDownIcon, () => ArrowDownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowDownIcon[HMR].source;
    set(ArrowDownIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowDownIcon_default = ArrowDownIcon;
mark_module_end(ArrowDownIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowLeftCircleIcon.svelte
mark_module_start();
ArrowLeftCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowLeftCircleIcon.svelte";
var root17 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 8 8 12 12 16"></polyline><line x1="16" y1="12" x2="8" y2="12"></line></svg>`), ArrowLeftCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 254], [14, 294], [14, 340]]
  ]
]);
function ArrowLeftCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowLeftCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root17();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-left-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftCircleIcon = hmr(ArrowLeftCircleIcon, () => ArrowLeftCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftCircleIcon[HMR].source;
    set(ArrowLeftCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftCircleIcon_default = ArrowLeftCircleIcon;
mark_module_end(ArrowLeftCircleIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowLeftIcon.svelte
mark_module_start();
ArrowLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowLeftIcon.svelte";
var root18 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="19" y1="12" x2="5" y2="12"></line><polyline points="12 19 5 12 12 5"></polyline></svg>`), ArrowLeftIcon[FILENAME], [
  [14, 0, [[14, 247], [14, 291]]]
]);
function ArrowLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root18();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowLeftIcon = hmr(ArrowLeftIcon, () => ArrowLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowLeftIcon[HMR].source;
    set(ArrowLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowLeftIcon_default = ArrowLeftIcon;
mark_module_end(ArrowLeftIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowRightCircleIcon.svelte
mark_module_start();
ArrowRightCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowRightCircleIcon.svelte";
var root19 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 16 16 12 12 8"></polyline><line x1="8" y1="12" x2="16" y2="12"></line></svg>`), ArrowRightCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 255], [14, 295], [14, 342]]
  ]
]);
function ArrowRightCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowRightCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root19();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-right-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRightCircleIcon = hmr(ArrowRightCircleIcon, () => ArrowRightCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRightCircleIcon[HMR].source;
    set(ArrowRightCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowRightCircleIcon_default = ArrowRightCircleIcon;
mark_module_end(ArrowRightCircleIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowRightIcon.svelte
mark_module_start();
ArrowRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowRightIcon.svelte";
var root20 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></svg>`), ArrowRightIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 292]]]
]);
function ArrowRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root20();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowRightIcon = hmr(ArrowRightIcon, () => ArrowRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowRightIcon[HMR].source;
    set(ArrowRightIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowRightIcon_default = ArrowRightIcon;
mark_module_end(ArrowRightIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowUpCircleIcon.svelte
mark_module_start();
ArrowUpCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowUpCircleIcon.svelte";
var root21 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="16 12 12 8 8 12"></polyline><line x1="12" y1="16" x2="12" y2="8"></line></svg>`), ArrowUpCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 252], [14, 292], [14, 338]]
  ]
]);
function ArrowUpCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowUpCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root21();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-up-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpCircleIcon = hmr(ArrowUpCircleIcon, () => ArrowUpCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpCircleIcon[HMR].source;
    set(ArrowUpCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpCircleIcon_default = ArrowUpCircleIcon;
mark_module_end(ArrowUpCircleIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowUpLeftIcon.svelte
mark_module_start();
ArrowUpLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowUpLeftIcon.svelte";
var root22 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="17" y1="17" x2="7" y2="7"></line><polyline points="7 17 7 7 17 7"></polyline></svg>`), ArrowUpLeftIcon[FILENAME], [
  [14, 0, [[14, 250], [14, 293]]]
]);
function ArrowUpLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowUpLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root22();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-up-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpLeftIcon = hmr(ArrowUpLeftIcon, () => ArrowUpLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpLeftIcon[HMR].source;
    set(ArrowUpLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpLeftIcon_default = ArrowUpLeftIcon;
mark_module_end(ArrowUpLeftIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowUpRightIcon.svelte
mark_module_start();
ArrowUpRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowUpRightIcon.svelte";
var root23 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="7" y1="17" x2="17" y2="7"></line><polyline points="7 7 17 7 17 17"></polyline></svg>`), ArrowUpRightIcon[FILENAME], [
  [14, 0, [[14, 251], [14, 294]]]
]);
function ArrowUpRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowUpRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root23();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-up-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpRightIcon = hmr(ArrowUpRightIcon, () => ArrowUpRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpRightIcon[HMR].source;
    set(ArrowUpRightIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpRightIcon_default = ArrowUpRightIcon;
mark_module_end(ArrowUpRightIcon);

// node_modules/svelte-feather-icons/src/icons/ArrowUpIcon.svelte
mark_module_start();
ArrowUpIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ArrowUpIcon.svelte";
var root24 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="19" x2="12" y2="5"></line><polyline points="5 12 12 5 19 12"></polyline></svg>`), ArrowUpIcon[FILENAME], [
  [14, 0, [[14, 245], [14, 289]]]
]);
function ArrowUpIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ArrowUpIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root24();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-arrow-up ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ArrowUpIcon = hmr(ArrowUpIcon, () => ArrowUpIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ArrowUpIcon[HMR].source;
    set(ArrowUpIcon[HMR].source, module.default[HMR].original);
  });
}
var ArrowUpIcon_default = ArrowUpIcon;
mark_module_end(ArrowUpIcon);

// node_modules/svelte-feather-icons/src/icons/AtSignIcon.svelte
mark_module_start();
AtSignIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AtSignIcon.svelte";
var root25 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="4"></circle><path d="M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-3.92 7.94"></path></svg>`), AtSignIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 283]]]
]);
function AtSignIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AtSignIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root25();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-at-sign ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AtSignIcon = hmr(AtSignIcon, () => AtSignIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AtSignIcon[HMR].source;
    set(AtSignIcon[HMR].source, module.default[HMR].original);
  });
}
var AtSignIcon_default = AtSignIcon;
mark_module_end(AtSignIcon);

// node_modules/svelte-feather-icons/src/icons/AwardIcon.svelte
mark_module_start();
AwardIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/AwardIcon.svelte";
var root26 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="8" r="7"></circle><polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88"></polyline></svg>`), AwardIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 280]]]
]);
function AwardIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, AwardIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root26();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-award ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  AwardIcon = hmr(AwardIcon, () => AwardIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AwardIcon[HMR].source;
    set(AwardIcon[HMR].source, module.default[HMR].original);
  });
}
var AwardIcon_default = AwardIcon;
mark_module_end(AwardIcon);

// node_modules/svelte-feather-icons/src/icons/BarChart2Icon.svelte
mark_module_start();
BarChart2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BarChart2Icon.svelte";
var root27 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="20" x2="18" y2="10"></line><line x1="12" y1="20" x2="12" y2="4"></line><line x1="6" y1="20" x2="6" y2="14"></line></svg>`), BarChart2Icon[FILENAME], [
  [
    14,
    0,
    [[14, 248], [14, 293], [14, 337]]
  ]
]);
function BarChart2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BarChart2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root27();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-bar-chart-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BarChart2Icon = hmr(BarChart2Icon, () => BarChart2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BarChart2Icon[HMR].source;
    set(BarChart2Icon[HMR].source, module.default[HMR].original);
  });
}
var BarChart2Icon_default = BarChart2Icon;
mark_module_end(BarChart2Icon);

// node_modules/svelte-feather-icons/src/icons/BarChartIcon.svelte
mark_module_start();
BarChartIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BarChartIcon.svelte";
var root28 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="20" x2="12" y2="10"></line><line x1="18" y1="20" x2="18" y2="4"></line><line x1="6" y1="20" x2="6" y2="16"></line></svg>`), BarChartIcon[FILENAME], [
  [
    14,
    0,
    [[14, 246], [14, 291], [14, 335]]
  ]
]);
function BarChartIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BarChartIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root28();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-bar-chart ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BarChartIcon = hmr(BarChartIcon, () => BarChartIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BarChartIcon[HMR].source;
    set(BarChartIcon[HMR].source, module.default[HMR].original);
  });
}
var BarChartIcon_default = BarChartIcon;
mark_module_end(BarChartIcon);

// node_modules/svelte-feather-icons/src/icons/BatteryChargingIcon.svelte
mark_module_start();
BatteryChargingIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BatteryChargingIcon.svelte";
var root29 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M5 18H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.19M15 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.19"></path><line x1="23" y1="13" x2="23" y2="11"></line><polyline points="11 6 7 12 13 12 9 18"></polyline></svg>`), BatteryChargingIcon[FILENAME], [
  [
    14,
    0,
    [[14, 253], [14, 356], [14, 401]]
  ]
]);
function BatteryChargingIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BatteryChargingIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root29();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-battery-charging ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BatteryChargingIcon = hmr(BatteryChargingIcon, () => BatteryChargingIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BatteryChargingIcon[HMR].source;
    set(BatteryChargingIcon[HMR].source, module.default[HMR].original);
  });
}
var BatteryChargingIcon_default = BatteryChargingIcon;
mark_module_end(BatteryChargingIcon);

// node_modules/svelte-feather-icons/src/icons/BatteryIcon.svelte
mark_module_start();
BatteryIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BatteryIcon.svelte";
var root30 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="6" width="18" height="12" rx="2" ry="2"></rect><line x1="23" y1="13" x2="23" y2="11"></line></svg>`), BatteryIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 306]]]
]);
function BatteryIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BatteryIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root30();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-battery ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BatteryIcon = hmr(BatteryIcon, () => BatteryIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BatteryIcon[HMR].source;
    set(BatteryIcon[HMR].source, module.default[HMR].original);
  });
}
var BatteryIcon_default = BatteryIcon;
mark_module_end(BatteryIcon);

// node_modules/svelte-feather-icons/src/icons/BellOffIcon.svelte
mark_module_start();
BellOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BellOffIcon.svelte";
var root31 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M13.73 21a2 2 0 0 1-3.46 0"></path><path d="M18.63 13A17.89 17.89 0 0 1 18 8"></path><path d="M6.26 6.26A5.86 5.86 0 0 0 6 8c0 7-3 9-3 9h14"></path><path d="M18 8a6 6 0 0 0-9.33-5"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>`), BellOffIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 245],
      [14, 289],
      [14, 339],
      [14, 402],
      [14, 442]
    ]
  ]
]);
function BellOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BellOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root31();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-bell-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BellOffIcon = hmr(BellOffIcon, () => BellOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BellOffIcon[HMR].source;
    set(BellOffIcon[HMR].source, module.default[HMR].original);
  });
}
var BellOffIcon_default = BellOffIcon;
mark_module_end(BellOffIcon);

// node_modules/svelte-feather-icons/src/icons/BellIcon.svelte
mark_module_start();
BellIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BellIcon.svelte";
var root32 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9"></path><path d="M13.73 21a2 2 0 0 1-3.46 0"></path></svg>`), BellIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 302]]]
]);
function BellIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BellIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root32();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-bell ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BellIcon = hmr(BellIcon, () => BellIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BellIcon[HMR].source;
    set(BellIcon[HMR].source, module.default[HMR].original);
  });
}
var BellIcon_default = BellIcon;
mark_module_end(BellIcon);

// node_modules/svelte-feather-icons/src/icons/BluetoothIcon.svelte
mark_module_start();
BluetoothIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BluetoothIcon.svelte";
var root33 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="6.5 6.5 17.5 17.5 12 23 12 1 17.5 6.5 6.5 17.5"></polyline></svg>`), BluetoothIcon[FILENAME], [[14, 0, [[14, 246]]]]);
function BluetoothIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BluetoothIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root33();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-bluetooth ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BluetoothIcon = hmr(BluetoothIcon, () => BluetoothIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BluetoothIcon[HMR].source;
    set(BluetoothIcon[HMR].source, module.default[HMR].original);
  });
}
var BluetoothIcon_default = BluetoothIcon;
mark_module_end(BluetoothIcon);

// node_modules/svelte-feather-icons/src/icons/BoldIcon.svelte
mark_module_start();
BoldIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BoldIcon.svelte";
var root34 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path><path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path></svg>`), BoldIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 296]]]
]);
function BoldIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BoldIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root34();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-bold ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoldIcon = hmr(BoldIcon, () => BoldIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoldIcon[HMR].source;
    set(BoldIcon[HMR].source, module.default[HMR].original);
  });
}
var BoldIcon_default = BoldIcon;
mark_module_end(BoldIcon);

// node_modules/svelte-feather-icons/src/icons/BookOpenIcon.svelte
mark_module_start();
BookOpenIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BookOpenIcon.svelte";
var root35 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path></svg>`), BookOpenIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 304]]]
]);
function BookOpenIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BookOpenIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root35();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-book-open ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookOpenIcon = hmr(BookOpenIcon, () => BookOpenIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookOpenIcon[HMR].source;
    set(BookOpenIcon[HMR].source, module.default[HMR].original);
  });
}
var BookOpenIcon_default = BookOpenIcon;
mark_module_end(BookOpenIcon);

// node_modules/svelte-feather-icons/src/icons/BookIcon.svelte
mark_module_start();
BookIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BookIcon.svelte";
var root36 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path><path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path></svg>`), BookIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 290]]]
]);
function BookIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BookIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root36();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-book ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookIcon = hmr(BookIcon, () => BookIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookIcon[HMR].source;
    set(BookIcon[HMR].source, module.default[HMR].original);
  });
}
var BookIcon_default = BookIcon;
mark_module_end(BookIcon);

// node_modules/svelte-feather-icons/src/icons/BookmarkIcon.svelte
mark_module_start();
BookmarkIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BookmarkIcon.svelte";
var root37 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path></svg>`), BookmarkIcon[FILENAME], [[14, 0, [[14, 245]]]]);
function BookmarkIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BookmarkIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root37();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-bookmark ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BookmarkIcon = hmr(BookmarkIcon, () => BookmarkIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BookmarkIcon[HMR].source;
    set(BookmarkIcon[HMR].source, module.default[HMR].original);
  });
}
var BookmarkIcon_default = BookmarkIcon;
mark_module_end(BookmarkIcon);

// node_modules/svelte-feather-icons/src/icons/BoxIcon.svelte
mark_module_start();
BoxIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BoxIcon.svelte";
var root38 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line></svg>`), BoxIcon[FILENAME], [
  [
    14,
    0,
    [[14, 240], [14, 379], [14, 439]]
  ]
]);
function BoxIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BoxIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root38();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-box ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BoxIcon = hmr(BoxIcon, () => BoxIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BoxIcon[HMR].source;
    set(BoxIcon[HMR].source, module.default[HMR].original);
  });
}
var BoxIcon_default = BoxIcon;
mark_module_end(BoxIcon);

// node_modules/svelte-feather-icons/src/icons/BriefcaseIcon.svelte
mark_module_start();
BriefcaseIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/BriefcaseIcon.svelte";
var root39 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="7" width="20" height="14" rx="2" ry="2"></rect><path d="M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16"></path></svg>`), BriefcaseIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 308]]]
]);
function BriefcaseIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, BriefcaseIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root39();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-briefcase ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  BriefcaseIcon = hmr(BriefcaseIcon, () => BriefcaseIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BriefcaseIcon[HMR].source;
    set(BriefcaseIcon[HMR].source, module.default[HMR].original);
  });
}
var BriefcaseIcon_default = BriefcaseIcon;
mark_module_end(BriefcaseIcon);

// node_modules/svelte-feather-icons/src/icons/CalendarIcon.svelte
mark_module_start();
CalendarIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CalendarIcon.svelte";
var root40 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect><line x1="16" y1="2" x2="16" y2="6"></line><line x1="8" y1="2" x2="8" y2="6"></line><line x1="3" y1="10" x2="21" y2="10"></line></svg>`), CalendarIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 245],
      [14, 307],
      [14, 350],
      [14, 391]
    ]
  ]
]);
function CalendarIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CalendarIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root40();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-calendar ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CalendarIcon = hmr(CalendarIcon, () => CalendarIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CalendarIcon[HMR].source;
    set(CalendarIcon[HMR].source, module.default[HMR].original);
  });
}
var CalendarIcon_default = CalendarIcon;
mark_module_end(CalendarIcon);

// node_modules/svelte-feather-icons/src/icons/CameraOffIcon.svelte
mark_module_start();
CameraOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CameraOffIcon.svelte";
var root41 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="1" y1="1" x2="23" y2="23"></line><path d="M21 21H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3m3-3h6l2 3h4a2 2 0 0 1 2 2v9.34m-7.72-2.06a4 4 0 1 1-5.56-5.56"></path></svg>`), CameraOffIcon[FILENAME], [
  [14, 0, [[14, 247], [14, 290]]]
]);
function CameraOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CameraOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root41();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-camera-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraOffIcon = hmr(CameraOffIcon, () => CameraOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraOffIcon[HMR].source;
    set(CameraOffIcon[HMR].source, module.default[HMR].original);
  });
}
var CameraOffIcon_default = CameraOffIcon;
mark_module_end(CameraOffIcon);

// node_modules/svelte-feather-icons/src/icons/CameraIcon.svelte
mark_module_start();
CameraIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CameraIcon.svelte";
var root42 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M23 19a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h4l2-3h6l2 3h4a2 2 0 0 1 2 2z"></path><circle cx="12" cy="13" r="4"></circle></svg>`), CameraIcon[FILENAME], [
  [14, 0, [[14, 243], [14, 342]]]
]);
function CameraIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CameraIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root42();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-camera ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CameraIcon = hmr(CameraIcon, () => CameraIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CameraIcon[HMR].source;
    set(CameraIcon[HMR].source, module.default[HMR].original);
  });
}
var CameraIcon_default = CameraIcon;
mark_module_end(CameraIcon);

// node_modules/svelte-feather-icons/src/icons/CastIcon.svelte
mark_module_start();
CastIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CastIcon.svelte";
var root43 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M2 16.1A5 5 0 0 1 5.9 20M2 12.05A9 9 0 0 1 9.95 20M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"></path><line x1="2" y1="20" x2="2.01" y2="20"></line></svg>`), CastIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 366]]]
]);
function CastIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CastIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root43();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cast ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CastIcon = hmr(CastIcon, () => CastIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CastIcon[HMR].source;
    set(CastIcon[HMR].source, module.default[HMR].original);
  });
}
var CastIcon_default = CastIcon;
mark_module_end(CastIcon);

// node_modules/svelte-feather-icons/src/icons/CheckCircleIcon.svelte
mark_module_start();
CheckCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CheckCircleIcon.svelte";
var root44 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>`), CheckCircleIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 301]]]
]);
function CheckCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CheckCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root44();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-check-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckCircleIcon = hmr(CheckCircleIcon, () => CheckCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckCircleIcon[HMR].source;
    set(CheckCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var CheckCircleIcon_default = CheckCircleIcon;
mark_module_end(CheckCircleIcon);

// node_modules/svelte-feather-icons/src/icons/CheckSquareIcon.svelte
mark_module_start();
CheckSquareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CheckSquareIcon.svelte";
var root45 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 11 12 14 22 4"></polyline><path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11"></path></svg>`), CheckSquareIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 295]]]
]);
function CheckSquareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CheckSquareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root45();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-check-square ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckSquareIcon = hmr(CheckSquareIcon, () => CheckSquareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckSquareIcon[HMR].source;
    set(CheckSquareIcon[HMR].source, module.default[HMR].original);
  });
}
var CheckSquareIcon_default = CheckSquareIcon;
mark_module_end(CheckSquareIcon);

// node_modules/svelte-feather-icons/src/icons/CheckIcon.svelte
mark_module_start();
CheckIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CheckIcon.svelte";
var root46 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>`), CheckIcon[FILENAME], [[14, 0, [[14, 242]]]]);
function CheckIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CheckIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root46();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-check ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CheckIcon = hmr(CheckIcon, () => CheckIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckIcon[HMR].source;
    set(CheckIcon[HMR].source, module.default[HMR].original);
  });
}
var CheckIcon_default = CheckIcon;
mark_module_end(CheckIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronDownIcon.svelte
mark_module_start();
ChevronDownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronDownIcon.svelte";
var root47 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 12 15 18 9"></polyline></svg>`), ChevronDownIcon[FILENAME], [[14, 0, [[14, 249]]]]);
function ChevronDownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronDownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root47();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevron-down ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronDownIcon = hmr(ChevronDownIcon, () => ChevronDownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronDownIcon[HMR].source;
    set(ChevronDownIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronDownIcon_default = ChevronDownIcon;
mark_module_end(ChevronDownIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronLeftIcon.svelte
mark_module_start();
ChevronLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronLeftIcon.svelte";
var root48 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"></polyline></svg>`), ChevronLeftIcon[FILENAME], [[14, 0, [[14, 249]]]]);
function ChevronLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root48();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevron-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronLeftIcon = hmr(ChevronLeftIcon, () => ChevronLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronLeftIcon[HMR].source;
    set(ChevronLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronLeftIcon_default = ChevronLeftIcon;
mark_module_end(ChevronLeftIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronRightIcon.svelte
mark_module_start();
ChevronRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronRightIcon.svelte";
var root49 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"></polyline></svg>`), ChevronRightIcon[FILENAME], [[14, 0, [[14, 250]]]]);
function ChevronRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root49();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevron-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronRightIcon = hmr(ChevronRightIcon, () => ChevronRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronRightIcon[HMR].source;
    set(ChevronRightIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronRightIcon_default = ChevronRightIcon;
mark_module_end(ChevronRightIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronUpIcon.svelte
mark_module_start();
ChevronUpIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronUpIcon.svelte";
var root50 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="18 15 12 9 6 15"></polyline></svg>`), ChevronUpIcon[FILENAME], [[14, 0, [[14, 247]]]]);
function ChevronUpIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronUpIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root50();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevron-up ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronUpIcon = hmr(ChevronUpIcon, () => ChevronUpIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronUpIcon[HMR].source;
    set(ChevronUpIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronUpIcon_default = ChevronUpIcon;
mark_module_end(ChevronUpIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronsDownIcon.svelte
mark_module_start();
ChevronsDownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronsDownIcon.svelte";
var root51 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="7 13 12 18 17 13"></polyline><polyline points="7 6 12 11 17 6"></polyline></svg>`), ChevronsDownIcon[FILENAME], [
  [14, 0, [[14, 250], [14, 297]]]
]);
function ChevronsDownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronsDownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root51();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevrons-down ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronsDownIcon = hmr(ChevronsDownIcon, () => ChevronsDownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronsDownIcon[HMR].source;
    set(ChevronsDownIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronsDownIcon_default = ChevronsDownIcon;
mark_module_end(ChevronsDownIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronsLeftIcon.svelte
mark_module_start();
ChevronsLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronsLeftIcon.svelte";
var root52 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="11 17 6 12 11 7"></polyline><polyline points="18 17 13 12 18 7"></polyline></svg>`), ChevronsLeftIcon[FILENAME], [
  [14, 0, [[14, 250], [14, 296]]]
]);
function ChevronsLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronsLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root52();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevrons-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronsLeftIcon = hmr(ChevronsLeftIcon, () => ChevronsLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronsLeftIcon[HMR].source;
    set(ChevronsLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronsLeftIcon_default = ChevronsLeftIcon;
mark_module_end(ChevronsLeftIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronsRightIcon.svelte
mark_module_start();
ChevronsRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronsRightIcon.svelte";
var root53 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="13 17 18 12 13 7"></polyline><polyline points="6 17 11 12 6 7"></polyline></svg>`), ChevronsRightIcon[FILENAME], [
  [14, 0, [[14, 251], [14, 298]]]
]);
function ChevronsRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronsRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root53();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevrons-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronsRightIcon = hmr(ChevronsRightIcon, () => ChevronsRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronsRightIcon[HMR].source;
    set(ChevronsRightIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronsRightIcon_default = ChevronsRightIcon;
mark_module_end(ChevronsRightIcon);

// node_modules/svelte-feather-icons/src/icons/ChevronsUpIcon.svelte
mark_module_start();
ChevronsUpIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChevronsUpIcon.svelte";
var root54 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="17 11 12 6 7 11"></polyline><polyline points="17 18 12 13 7 18"></polyline></svg>`), ChevronsUpIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 294]]]
]);
function ChevronsUpIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronsUpIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root54();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chevrons-up ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronsUpIcon = hmr(ChevronsUpIcon, () => ChevronsUpIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChevronsUpIcon[HMR].source;
    set(ChevronsUpIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronsUpIcon_default = ChevronsUpIcon;
mark_module_end(ChevronsUpIcon);

// node_modules/svelte-feather-icons/src/icons/ChromeIcon.svelte
mark_module_start();
ChromeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ChromeIcon.svelte";
var root55 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="4"></circle><line x1="21.17" y1="8" x2="12" y2="8"></line><line x1="3.95" y1="6.06" x2="8.54" y2="14"></line><line x1="10.88" y1="21.94" x2="15.46" y2="14"></line></svg>`), ChromeIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 243],
      [14, 283],
      [14, 322],
      [14, 368],
      [14, 419]
    ]
  ]
]);
function ChromeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChromeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root55();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-chrome ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChromeIcon = hmr(ChromeIcon, () => ChromeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ChromeIcon[HMR].source;
    set(ChromeIcon[HMR].source, module.default[HMR].original);
  });
}
var ChromeIcon_default = ChromeIcon;
mark_module_end(ChromeIcon);

// node_modules/svelte-feather-icons/src/icons/CircleIcon.svelte
mark_module_start();
CircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CircleIcon.svelte";
var root56 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle></svg>`), CircleIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function CircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root56();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CircleIcon = hmr(CircleIcon, () => CircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CircleIcon[HMR].source;
    set(CircleIcon[HMR].source, module.default[HMR].original);
  });
}
var CircleIcon_default = CircleIcon;
mark_module_end(CircleIcon);

// node_modules/svelte-feather-icons/src/icons/ClipboardIcon.svelte
mark_module_start();
ClipboardIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ClipboardIcon.svelte";
var root57 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect></svg>`), ClipboardIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 336]]]
]);
function ClipboardIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ClipboardIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root57();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-clipboard ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClipboardIcon = hmr(ClipboardIcon, () => ClipboardIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClipboardIcon[HMR].source;
    set(ClipboardIcon[HMR].source, module.default[HMR].original);
  });
}
var ClipboardIcon_default = ClipboardIcon;
mark_module_end(ClipboardIcon);

// node_modules/svelte-feather-icons/src/icons/ClockIcon.svelte
mark_module_start();
ClockIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ClockIcon.svelte";
var root58 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polyline points="12 6 12 12 16 14"></polyline></svg>`), ClockIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 282]]]
]);
function ClockIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ClockIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root58();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-clock ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClockIcon = hmr(ClockIcon, () => ClockIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ClockIcon[HMR].source;
    set(ClockIcon[HMR].source, module.default[HMR].original);
  });
}
var ClockIcon_default = ClockIcon;
mark_module_end(ClockIcon);

// node_modules/svelte-feather-icons/src/icons/CloudDrizzleIcon.svelte
mark_module_start();
CloudDrizzleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CloudDrizzleIcon.svelte";
var root59 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="19" x2="8" y2="21"></line><line x1="8" y1="13" x2="8" y2="15"></line><line x1="16" y1="19" x2="16" y2="21"></line><line x1="16" y1="13" x2="16" y2="15"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="12" y1="15" x2="12" y2="17"></line><path d="M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"></path></svg>`), CloudDrizzleIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 250],
      [14, 293],
      [14, 336],
      [14, 381],
      [14, 426],
      [14, 471],
      [14, 516]
    ]
  ]
]);
function CloudDrizzleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CloudDrizzleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root59();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cloud-drizzle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudDrizzleIcon = hmr(CloudDrizzleIcon, () => CloudDrizzleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudDrizzleIcon[HMR].source;
    set(CloudDrizzleIcon[HMR].source, module.default[HMR].original);
  });
}
var CloudDrizzleIcon_default = CloudDrizzleIcon;
mark_module_end(CloudDrizzleIcon);

// node_modules/svelte-feather-icons/src/icons/CloudLightningIcon.svelte
mark_module_start();
CloudLightningIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CloudLightningIcon.svelte";
var root60 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M19 16.9A5 5 0 0 0 18 7h-1.26a8 8 0 1 0-11.62 9"></path><polyline points="13 11 9 17 15 17 11 23"></polyline></svg>`), CloudLightningIcon[FILENAME], [
  [14, 0, [[14, 252], [14, 317]]]
]);
function CloudLightningIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CloudLightningIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root60();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cloud-lightning ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudLightningIcon = hmr(CloudLightningIcon, () => CloudLightningIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudLightningIcon[HMR].source;
    set(CloudLightningIcon[HMR].source, module.default[HMR].original);
  });
}
var CloudLightningIcon_default = CloudLightningIcon;
mark_module_end(CloudLightningIcon);

// node_modules/svelte-feather-icons/src/icons/CloudOffIcon.svelte
mark_module_start();
CloudOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CloudOffIcon.svelte";
var root61 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22.61 16.95A5 5 0 0 0 18 10h-1.26a8 8 0 0 0-7.05-6M5 5a8 8 0 0 0 4 15h9a5 5 0 0 0 1.7-.3"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>`), CloudOffIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 353]]]
]);
function CloudOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CloudOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root61();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cloud-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudOffIcon = hmr(CloudOffIcon, () => CloudOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudOffIcon[HMR].source;
    set(CloudOffIcon[HMR].source, module.default[HMR].original);
  });
}
var CloudOffIcon_default = CloudOffIcon;
mark_module_end(CloudOffIcon);

// node_modules/svelte-feather-icons/src/icons/CloudRainIcon.svelte
mark_module_start();
CloudRainIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CloudRainIcon.svelte";
var root62 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="16" y1="13" x2="16" y2="21"></line><line x1="8" y1="13" x2="8" y2="21"></line><line x1="12" y1="15" x2="12" y2="23"></line><path d="M20 16.58A5 5 0 0 0 18 7h-1.26A8 8 0 1 0 4 15.25"></path></svg>`), CloudRainIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 247],
      [14, 292],
      [14, 335],
      [14, 380]
    ]
  ]
]);
function CloudRainIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CloudRainIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root62();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cloud-rain ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudRainIcon = hmr(CloudRainIcon, () => CloudRainIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudRainIcon[HMR].source;
    set(CloudRainIcon[HMR].source, module.default[HMR].original);
  });
}
var CloudRainIcon_default = CloudRainIcon;
mark_module_end(CloudRainIcon);

// node_modules/svelte-feather-icons/src/icons/CloudSnowIcon.svelte
mark_module_start();
CloudSnowIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CloudSnowIcon.svelte";
var root63 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M20 17.58A5 5 0 0 0 18 8h-1.26A8 8 0 1 0 4 16.25"></path><line x1="8" y1="16" x2="8.01" y2="16"></line><line x1="8" y1="20" x2="8.01" y2="20"></line><line x1="12" y1="18" x2="12.01" y2="18"></line><line x1="12" y1="22" x2="12.01" y2="22"></line><line x1="16" y1="16" x2="16.01" y2="16"></line><line x1="16" y1="20" x2="16.01" y2="20"></line></svg>`), CloudSnowIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 247],
      [14, 313],
      [14, 359],
      [14, 405],
      [14, 453],
      [14, 501],
      [14, 549]
    ]
  ]
]);
function CloudSnowIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CloudSnowIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root63();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cloud-snow ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudSnowIcon = hmr(CloudSnowIcon, () => CloudSnowIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudSnowIcon[HMR].source;
    set(CloudSnowIcon[HMR].source, module.default[HMR].original);
  });
}
var CloudSnowIcon_default = CloudSnowIcon;
mark_module_end(CloudSnowIcon);

// node_modules/svelte-feather-icons/src/icons/CloudIcon.svelte
mark_module_start();
CloudIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CloudIcon.svelte";
var root64 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M18 10h-1.26A8 8 0 1 0 9 20h9a5 5 0 0 0 0-10z"></path></svg>`), CloudIcon[FILENAME], [[14, 0, [[14, 242]]]]);
function CloudIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CloudIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root64();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cloud ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CloudIcon = hmr(CloudIcon, () => CloudIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloudIcon[HMR].source;
    set(CloudIcon[HMR].source, module.default[HMR].original);
  });
}
var CloudIcon_default = CloudIcon;
mark_module_end(CloudIcon);

// node_modules/svelte-feather-icons/src/icons/CodeIcon.svelte
mark_module_start();
CodeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CodeIcon.svelte";
var root65 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>`), CodeIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 288]]]
]);
function CodeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CodeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root65();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-code ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CodeIcon = hmr(CodeIcon, () => CodeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CodeIcon[HMR].source;
    set(CodeIcon[HMR].source, module.default[HMR].original);
  });
}
var CodeIcon_default = CodeIcon;
mark_module_end(CodeIcon);

// node_modules/svelte-feather-icons/src/icons/CodepenIcon.svelte
mark_module_start();
CodepenIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CodepenIcon.svelte";
var root66 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2"></polygon><line x1="12" y1="22" x2="12" y2="15.5"></line><polyline points="22 8.5 12 15.5 2 8.5"></polyline><polyline points="2 15.5 12 8.5 22 15.5"></polyline><line x1="12" y1="2" x2="12" y2="8.5"></line></svg>`), CodepenIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 316],
      [14, 363],
      [14, 414],
      [14, 466]
    ]
  ]
]);
function CodepenIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CodepenIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root66();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-codepen ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CodepenIcon = hmr(CodepenIcon, () => CodepenIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CodepenIcon[HMR].source;
    set(CodepenIcon[HMR].source, module.default[HMR].original);
  });
}
var CodepenIcon_default = CodepenIcon;
mark_module_end(CodepenIcon);

// node_modules/svelte-feather-icons/src/icons/CodesandboxIcon.svelte
mark_module_start();
CodesandboxIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CodesandboxIcon.svelte";
var root67 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="7.5 4.21 12 6.81 16.5 4.21"></polyline><polyline points="7.5 19.79 7.5 14.6 3 12"></polyline><polyline points="21 12 16.5 14.6 16.5 19.79"></polyline><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line></svg>`), CodesandboxIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 248],
      [14, 387],
      [14, 444],
      [14, 498],
      [14, 555],
      [14, 615]
    ]
  ]
]);
function CodesandboxIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CodesandboxIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root67();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-codesandbox ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CodesandboxIcon = hmr(CodesandboxIcon, () => CodesandboxIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CodesandboxIcon[HMR].source;
    set(CodesandboxIcon[HMR].source, module.default[HMR].original);
  });
}
var CodesandboxIcon_default = CodesandboxIcon;
mark_module_end(CodesandboxIcon);

// node_modules/svelte-feather-icons/src/icons/CoffeeIcon.svelte
mark_module_start();
CoffeeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CoffeeIcon.svelte";
var root68 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M18 8h1a4 4 0 0 1 0 8h-1"></path><path d="M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z"></path><line x1="6" y1="1" x2="6" y2="4"></line><line x1="10" y1="1" x2="10" y2="4"></line><line x1="14" y1="1" x2="14" y2="4"></line></svg>`), CoffeeIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 243],
      [14, 285],
      [14, 345],
      [14, 386],
      [14, 429]
    ]
  ]
]);
function CoffeeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CoffeeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root68();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-coffee ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CoffeeIcon = hmr(CoffeeIcon, () => CoffeeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CoffeeIcon[HMR].source;
    set(CoffeeIcon[HMR].source, module.default[HMR].original);
  });
}
var CoffeeIcon_default = CoffeeIcon;
mark_module_end(CoffeeIcon);

// node_modules/svelte-feather-icons/src/icons/ColumnsIcon.svelte
mark_module_start();
ColumnsIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ColumnsIcon.svelte";
var root69 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M12 3h7a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-7m0-18H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7m0-18v18"></path></svg>`), ColumnsIcon[FILENAME], [[14, 0, [[14, 244]]]]);
function ColumnsIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ColumnsIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root69();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-columns ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ColumnsIcon = hmr(ColumnsIcon, () => ColumnsIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ColumnsIcon[HMR].source;
    set(ColumnsIcon[HMR].source, module.default[HMR].original);
  });
}
var ColumnsIcon_default = ColumnsIcon;
mark_module_end(ColumnsIcon);

// node_modules/svelte-feather-icons/src/icons/CommandIcon.svelte
mark_module_start();
CommandIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CommandIcon.svelte";
var root70 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M18 3a3 3 0 0 0-3 3v12a3 3 0 0 0 3 3 3 3 0 0 0 3-3 3 3 0 0 0-3-3H6a3 3 0 0 0-3 3 3 3 0 0 0 3 3 3 3 0 0 0 3-3V6a3 3 0 0 0-3-3 3 3 0 0 0-3 3 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 3 3 0 0 0-3-3z"></path></svg>`), CommandIcon[FILENAME], [[14, 0, [[14, 244]]]]);
function CommandIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CommandIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root70();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-command ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CommandIcon = hmr(CommandIcon, () => CommandIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CommandIcon[HMR].source;
    set(CommandIcon[HMR].source, module.default[HMR].original);
  });
}
var CommandIcon_default = CommandIcon;
mark_module_end(CommandIcon);

// node_modules/svelte-feather-icons/src/icons/CompassIcon.svelte
mark_module_start();
CompassIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CompassIcon.svelte";
var root71 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polygon points="16.24 7.76 14.12 14.12 7.76 16.24 9.88 9.88 16.24 7.76"></polygon></svg>`), CompassIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 284]]]
]);
function CompassIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CompassIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root71();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-compass ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CompassIcon = hmr(CompassIcon, () => CompassIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CompassIcon[HMR].source;
    set(CompassIcon[HMR].source, module.default[HMR].original);
  });
}
var CompassIcon_default = CompassIcon;
mark_module_end(CompassIcon);

// node_modules/svelte-feather-icons/src/icons/CopyIcon.svelte
mark_module_start();
CopyIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CopyIcon.svelte";
var root72 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>`), CopyIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 303]]]
]);
function CopyIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CopyIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root72();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-copy ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CopyIcon = hmr(CopyIcon, () => CopyIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CopyIcon[HMR].source;
    set(CopyIcon[HMR].source, module.default[HMR].original);
  });
}
var CopyIcon_default = CopyIcon;
mark_module_end(CopyIcon);

// node_modules/svelte-feather-icons/src/icons/CornerDownLeftIcon.svelte
mark_module_start();
CornerDownLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerDownLeftIcon.svelte";
var root73 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 10 4 15 9 20"></polyline><path d="M20 4v7a4 4 0 0 1-4 4H4"></path></svg>`), CornerDownLeftIcon[FILENAME], [
  [14, 0, [[14, 253], [14, 298]]]
]);
function CornerDownLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerDownLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root73();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-down-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerDownLeftIcon = hmr(CornerDownLeftIcon, () => CornerDownLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerDownLeftIcon[HMR].source;
    set(CornerDownLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerDownLeftIcon_default = CornerDownLeftIcon;
mark_module_end(CornerDownLeftIcon);

// node_modules/svelte-feather-icons/src/icons/CornerDownRightIcon.svelte
mark_module_start();
CornerDownRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerDownRightIcon.svelte";
var root74 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 10 20 15 15 20"></polyline><path d="M4 4v7a4 4 0 0 0 4 4h12"></path></svg>`), CornerDownRightIcon[FILENAME], [
  [14, 0, [[14, 254], [14, 302]]]
]);
function CornerDownRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerDownRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root74();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-down-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerDownRightIcon = hmr(CornerDownRightIcon, () => CornerDownRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerDownRightIcon[HMR].source;
    set(CornerDownRightIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerDownRightIcon_default = CornerDownRightIcon;
mark_module_end(CornerDownRightIcon);

// node_modules/svelte-feather-icons/src/icons/CornerLeftDownIcon.svelte
mark_module_start();
CornerLeftDownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerLeftDownIcon.svelte";
var root75 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="14 15 9 20 4 15"></polyline><path d="M20 4h-7a4 4 0 0 0-4 4v12"></path></svg>`), CornerLeftDownIcon[FILENAME], [
  [14, 0, [[14, 253], [14, 299]]]
]);
function CornerLeftDownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerLeftDownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root75();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-left-down ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerLeftDownIcon = hmr(CornerLeftDownIcon, () => CornerLeftDownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerLeftDownIcon[HMR].source;
    set(CornerLeftDownIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerLeftDownIcon_default = CornerLeftDownIcon;
mark_module_end(CornerLeftDownIcon);

// node_modules/svelte-feather-icons/src/icons/CornerLeftUpIcon.svelte
mark_module_start();
CornerLeftUpIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerLeftUpIcon.svelte";
var root76 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="14 9 9 4 4 9"></polyline><path d="M20 20h-7a4 4 0 0 1-4-4V4"></path></svg>`), CornerLeftUpIcon[FILENAME], [
  [14, 0, [[14, 251], [14, 294]]]
]);
function CornerLeftUpIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerLeftUpIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root76();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-left-up ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerLeftUpIcon = hmr(CornerLeftUpIcon, () => CornerLeftUpIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerLeftUpIcon[HMR].source;
    set(CornerLeftUpIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerLeftUpIcon_default = CornerLeftUpIcon;
mark_module_end(CornerLeftUpIcon);

// node_modules/svelte-feather-icons/src/icons/CornerRightDownIcon.svelte
mark_module_start();
CornerRightDownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerRightDownIcon.svelte";
var root77 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="10 15 15 20 20 15"></polyline><path d="M4 4h7a4 4 0 0 1 4 4v12"></path></svg>`), CornerRightDownIcon[FILENAME], [
  [14, 0, [[14, 254], [14, 302]]]
]);
function CornerRightDownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerRightDownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root77();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-right-down ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerRightDownIcon = hmr(CornerRightDownIcon, () => CornerRightDownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerRightDownIcon[HMR].source;
    set(CornerRightDownIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerRightDownIcon_default = CornerRightDownIcon;
mark_module_end(CornerRightDownIcon);

// node_modules/svelte-feather-icons/src/icons/CornerRightUpIcon.svelte
mark_module_start();
CornerRightUpIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerRightUpIcon.svelte";
var root78 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="10 9 15 4 20 9"></polyline><path d="M4 20h7a4 4 0 0 0 4-4V4"></path></svg>`), CornerRightUpIcon[FILENAME], [
  [14, 0, [[14, 252], [14, 297]]]
]);
function CornerRightUpIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerRightUpIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root78();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-right-up ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerRightUpIcon = hmr(CornerRightUpIcon, () => CornerRightUpIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerRightUpIcon[HMR].source;
    set(CornerRightUpIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerRightUpIcon_default = CornerRightUpIcon;
mark_module_end(CornerRightUpIcon);

// node_modules/svelte-feather-icons/src/icons/CornerUpLeftIcon.svelte
mark_module_start();
CornerUpLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerUpLeftIcon.svelte";
var root79 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 14 4 9 9 4"></polyline><path d="M20 20v-7a4 4 0 0 0-4-4H4"></path></svg>`), CornerUpLeftIcon[FILENAME], [
  [14, 0, [[14, 251], [14, 294]]]
]);
function CornerUpLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerUpLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root79();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-up-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerUpLeftIcon = hmr(CornerUpLeftIcon, () => CornerUpLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerUpLeftIcon[HMR].source;
    set(CornerUpLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerUpLeftIcon_default = CornerUpLeftIcon;
mark_module_end(CornerUpLeftIcon);

// node_modules/svelte-feather-icons/src/icons/CornerUpRightIcon.svelte
mark_module_start();
CornerUpRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CornerUpRightIcon.svelte";
var root80 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 14 20 9 15 4"></polyline><path d="M4 20v-7a4 4 0 0 1 4-4h12"></path></svg>`), CornerUpRightIcon[FILENAME], [
  [14, 0, [[14, 252], [14, 298]]]
]);
function CornerUpRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CornerUpRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root80();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-corner-up-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CornerUpRightIcon = hmr(CornerUpRightIcon, () => CornerUpRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CornerUpRightIcon[HMR].source;
    set(CornerUpRightIcon[HMR].source, module.default[HMR].original);
  });
}
var CornerUpRightIcon_default = CornerUpRightIcon;
mark_module_end(CornerUpRightIcon);

// node_modules/svelte-feather-icons/src/icons/CpuIcon.svelte
mark_module_start();
CpuIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CpuIcon.svelte";
var root81 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="4" y="4" width="16" height="16" rx="2" ry="2"></rect><rect x="9" y="9" width="6" height="6"></rect><line x1="9" y1="1" x2="9" y2="4"></line><line x1="15" y1="1" x2="15" y2="4"></line><line x1="9" y1="20" x2="9" y2="23"></line><line x1="15" y1="20" x2="15" y2="23"></line><line x1="20" y1="9" x2="23" y2="9"></line><line x1="20" y1="14" x2="23" y2="14"></line><line x1="1" y1="9" x2="4" y2="9"></line><line x1="1" y1="14" x2="4" y2="14"></line></svg>`), CpuIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 240],
      [14, 302],
      [14, 348],
      [14, 389],
      [14, 432],
      [14, 475],
      [14, 520],
      [14, 563],
      [14, 608],
      [14, 649]
    ]
  ]
]);
function CpuIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CpuIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root81();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-cpu ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CpuIcon = hmr(CpuIcon, () => CpuIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CpuIcon[HMR].source;
    set(CpuIcon[HMR].source, module.default[HMR].original);
  });
}
var CpuIcon_default = CpuIcon;
mark_module_end(CpuIcon);

// node_modules/svelte-feather-icons/src/icons/CreditCardIcon.svelte
mark_module_start();
CreditCardIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CreditCardIcon.svelte";
var root82 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="4" width="22" height="16" rx="2" ry="2"></rect><line x1="1" y1="10" x2="23" y2="10"></line></svg>`), CreditCardIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 310]]]
]);
function CreditCardIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CreditCardIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root82();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-credit-card ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CreditCardIcon = hmr(CreditCardIcon, () => CreditCardIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CreditCardIcon[HMR].source;
    set(CreditCardIcon[HMR].source, module.default[HMR].original);
  });
}
var CreditCardIcon_default = CreditCardIcon;
mark_module_end(CreditCardIcon);

// node_modules/svelte-feather-icons/src/icons/CropIcon.svelte
mark_module_start();
CropIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CropIcon.svelte";
var root83 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M6.13 1L6 16a2 2 0 0 0 2 2h15"></path><path d="M1 6.13L16 6a2 2 0 0 1 2 2v15"></path></svg>`), CropIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 288]]]
]);
function CropIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CropIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root83();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-crop ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CropIcon = hmr(CropIcon, () => CropIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CropIcon[HMR].source;
    set(CropIcon[HMR].source, module.default[HMR].original);
  });
}
var CropIcon_default = CropIcon;
mark_module_end(CropIcon);

// node_modules/svelte-feather-icons/src/icons/CrosshairIcon.svelte
mark_module_start();
CrosshairIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/CrosshairIcon.svelte";
var root84 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="22" y1="12" x2="18" y2="12"></line><line x1="6" y1="12" x2="2" y2="12"></line><line x1="12" y1="6" x2="12" y2="2"></line><line x1="12" y1="22" x2="12" y2="18"></line></svg>`), CrosshairIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 246],
      [14, 286],
      [14, 331],
      [14, 374],
      [14, 417]
    ]
  ]
]);
function CrosshairIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, CrosshairIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root84();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-crosshair ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  CrosshairIcon = hmr(CrosshairIcon, () => CrosshairIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CrosshairIcon[HMR].source;
    set(CrosshairIcon[HMR].source, module.default[HMR].original);
  });
}
var CrosshairIcon_default = CrosshairIcon;
mark_module_end(CrosshairIcon);

// node_modules/svelte-feather-icons/src/icons/DatabaseIcon.svelte
mark_module_start();
DatabaseIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DatabaseIcon.svelte";
var root85 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><ellipse cx="12" cy="5" rx="9" ry="3"></ellipse><path d="M21 12c0 1.66-4 3-9 3s-9-1.34-9-3"></path><path d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5"></path></svg>`), DatabaseIcon[FILENAME], [
  [
    14,
    0,
    [[14, 245], [14, 293], [14, 344]]
  ]
]);
function DatabaseIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DatabaseIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root85();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-database ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DatabaseIcon = hmr(DatabaseIcon, () => DatabaseIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DatabaseIcon[HMR].source;
    set(DatabaseIcon[HMR].source, module.default[HMR].original);
  });
}
var DatabaseIcon_default = DatabaseIcon;
mark_module_end(DatabaseIcon);

// node_modules/svelte-feather-icons/src/icons/DeleteIcon.svelte
mark_module_start();
DeleteIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DeleteIcon.svelte";
var root86 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"></path><line x1="18" y1="9" x2="12" y2="15"></line><line x1="12" y1="9" x2="18" y2="15"></line></svg>`), DeleteIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 311], [14, 355]]
  ]
]);
function DeleteIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DeleteIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root86();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-delete ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DeleteIcon = hmr(DeleteIcon, () => DeleteIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeleteIcon[HMR].source;
    set(DeleteIcon[HMR].source, module.default[HMR].original);
  });
}
var DeleteIcon_default = DeleteIcon;
mark_module_end(DeleteIcon);

// node_modules/svelte-feather-icons/src/icons/DiscIcon.svelte
mark_module_start();
DiscIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DiscIcon.svelte";
var root87 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="3"></circle></svg>`), DiscIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 281]]]
]);
function DiscIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DiscIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root87();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-disc ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DiscIcon = hmr(DiscIcon, () => DiscIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DiscIcon[HMR].source;
    set(DiscIcon[HMR].source, module.default[HMR].original);
  });
}
var DiscIcon_default = DiscIcon;
mark_module_end(DiscIcon);

// node_modules/svelte-feather-icons/src/icons/DivideCircleIcon.svelte
mark_module_start();
DivideCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DivideCircleIcon.svelte";
var root88 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="12" x2="16" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line><line x1="12" y1="8" x2="12" y2="8"></line><circle cx="12" cy="12" r="10"></circle></svg>`), DivideCircleIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 250],
      [14, 294],
      [14, 339],
      [14, 382]
    ]
  ]
]);
function DivideCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DivideCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root88();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-divide-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DivideCircleIcon = hmr(DivideCircleIcon, () => DivideCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DivideCircleIcon[HMR].source;
    set(DivideCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var DivideCircleIcon_default = DivideCircleIcon;
mark_module_end(DivideCircleIcon);

// node_modules/svelte-feather-icons/src/icons/DivideSquareIcon.svelte
mark_module_start();
DivideSquareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DivideSquareIcon.svelte";
var root89 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="8" y1="12" x2="16" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line><line x1="12" y1="8" x2="12" y2="8"></line></svg>`), DivideSquareIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 250],
      [14, 312],
      [14, 356],
      [14, 401]
    ]
  ]
]);
function DivideSquareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DivideSquareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root89();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-divide-square ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DivideSquareIcon = hmr(DivideSquareIcon, () => DivideSquareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DivideSquareIcon[HMR].source;
    set(DivideSquareIcon[HMR].source, module.default[HMR].original);
  });
}
var DivideSquareIcon_default = DivideSquareIcon;
mark_module_end(DivideSquareIcon);

// node_modules/svelte-feather-icons/src/icons/DivideIcon.svelte
mark_module_start();
DivideIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DivideIcon.svelte";
var root90 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="6" r="2"></circle><line x1="5" y1="12" x2="19" y2="12"></line><circle cx="12" cy="18" r="2"></circle></svg>`), DivideIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 281], [14, 325]]
  ]
]);
function DivideIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DivideIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root90();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-divide ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DivideIcon = hmr(DivideIcon, () => DivideIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DivideIcon[HMR].source;
    set(DivideIcon[HMR].source, module.default[HMR].original);
  });
}
var DivideIcon_default = DivideIcon;
mark_module_end(DivideIcon);

// node_modules/svelte-feather-icons/src/icons/DollarSignIcon.svelte
mark_module_start();
DollarSignIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DollarSignIcon.svelte";
var root91 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="1" x2="12" y2="23"></line><path d="M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"></path></svg>`), DollarSignIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 292]]]
]);
function DollarSignIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DollarSignIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root91();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-dollar-sign ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DollarSignIcon = hmr(DollarSignIcon, () => DollarSignIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DollarSignIcon[HMR].source;
    set(DollarSignIcon[HMR].source, module.default[HMR].original);
  });
}
var DollarSignIcon_default = DollarSignIcon;
mark_module_end(DollarSignIcon);

// node_modules/svelte-feather-icons/src/icons/DownloadCloudIcon.svelte
mark_module_start();
DownloadCloudIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DownloadCloudIcon.svelte";
var root92 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="8 17 12 21 16 17"></polyline><line x1="12" y1="12" x2="12" y2="21"></line><path d="M20.88 18.09A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.29"></path></svg>`), DownloadCloudIcon[FILENAME], [
  [
    14,
    0,
    [[14, 251], [14, 298], [14, 343]]
  ]
]);
function DownloadCloudIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DownloadCloudIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root92();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-download-cloud ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DownloadCloudIcon = hmr(DownloadCloudIcon, () => DownloadCloudIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DownloadCloudIcon[HMR].source;
    set(DownloadCloudIcon[HMR].source, module.default[HMR].original);
  });
}
var DownloadCloudIcon_default = DownloadCloudIcon;
mark_module_end(DownloadCloudIcon);

// node_modules/svelte-feather-icons/src/icons/DownloadIcon.svelte
mark_module_start();
DownloadIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DownloadIcon.svelte";
var root93 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" y1="15" x2="12" y2="3"></line></svg>`), DownloadIcon[FILENAME], [
  [
    14,
    0,
    [[14, 245], [14, 304], [14, 351]]
  ]
]);
function DownloadIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DownloadIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root93();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-download ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DownloadIcon = hmr(DownloadIcon, () => DownloadIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DownloadIcon[HMR].source;
    set(DownloadIcon[HMR].source, module.default[HMR].original);
  });
}
var DownloadIcon_default = DownloadIcon;
mark_module_end(DownloadIcon);

// node_modules/svelte-feather-icons/src/icons/DribbbleIcon.svelte
mark_module_start();
DribbbleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DribbbleIcon.svelte";
var root94 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M8.56 2.75c4.37 6.03 6.02 9.42 8.03 17.72m2.54-15.38c-3.72 4.35-8.94 5.66-16.88 5.85m19.5 1.9c-3.5-.93-6.63-.82-8.94 0-2.58.92-5.01 2.86-7.44 6.32"></path></svg>`), DribbbleIcon[FILENAME], [
  [14, 0, [[14, 245], [14, 285]]]
]);
function DribbbleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DribbbleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root94();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-dribbble ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DribbbleIcon = hmr(DribbbleIcon, () => DribbbleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DribbbleIcon[HMR].source;
    set(DribbbleIcon[HMR].source, module.default[HMR].original);
  });
}
var DribbbleIcon_default = DribbbleIcon;
mark_module_end(DribbbleIcon);

// node_modules/svelte-feather-icons/src/icons/DropletIcon.svelte
mark_module_start();
DropletIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/DropletIcon.svelte";
var root95 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"></path></svg>`), DropletIcon[FILENAME], [[14, 0, [[14, 244]]]]);
function DropletIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, DropletIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root95();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-droplet ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  DropletIcon = hmr(DropletIcon, () => DropletIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropletIcon[HMR].source;
    set(DropletIcon[HMR].source, module.default[HMR].original);
  });
}
var DropletIcon_default = DropletIcon;
mark_module_end(DropletIcon);

// node_modules/svelte-feather-icons/src/icons/Edit2Icon.svelte
mark_module_start();
Edit2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Edit2Icon.svelte";
var root96 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.828 2.828 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5L17 3z"></path></svg>`), Edit2Icon[FILENAME], [[14, 0, [[14, 243]]]]);
function Edit2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Edit2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root96();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-edit-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Edit2Icon = hmr(Edit2Icon, () => Edit2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Edit2Icon[HMR].source;
    set(Edit2Icon[HMR].source, module.default[HMR].original);
  });
}
var Edit2Icon_default = Edit2Icon;
mark_module_end(Edit2Icon);

// node_modules/svelte-feather-icons/src/icons/Edit3Icon.svelte
mark_module_start();
Edit3Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Edit3Icon.svelte";
var root97 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20h9"></path><path d="M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z"></path></svg>`), Edit3Icon[FILENAME], [
  [14, 0, [[14, 243], [14, 269]]]
]);
function Edit3Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Edit3Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root97();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-edit-3 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Edit3Icon = hmr(Edit3Icon, () => Edit3Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Edit3Icon[HMR].source;
    set(Edit3Icon[HMR].source, module.default[HMR].original);
  });
}
var Edit3Icon_default = Edit3Icon;
mark_module_end(Edit3Icon);

// node_modules/svelte-feather-icons/src/icons/EditIcon.svelte
mark_module_start();
EditIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/EditIcon.svelte";
var root98 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>`), EditIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 317]]]
]);
function EditIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, EditIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root98();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-edit ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EditIcon = hmr(EditIcon, () => EditIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EditIcon[HMR].source;
    set(EditIcon[HMR].source, module.default[HMR].original);
  });
}
var EditIcon_default = EditIcon;
mark_module_end(EditIcon);

// node_modules/svelte-feather-icons/src/icons/ExternalLinkIcon.svelte
mark_module_start();
ExternalLinkIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ExternalLinkIcon.svelte";
var root99 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"></path><polyline points="15 3 21 3 21 9"></polyline><line x1="10" y1="14" x2="21" y2="3"></line></svg>`), ExternalLinkIcon[FILENAME], [
  [
    14,
    0,
    [[14, 250], [14, 324], [14, 369]]
  ]
]);
function ExternalLinkIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ExternalLinkIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root99();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-external-link ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ExternalLinkIcon = hmr(ExternalLinkIcon, () => ExternalLinkIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ExternalLinkIcon[HMR].source;
    set(ExternalLinkIcon[HMR].source, module.default[HMR].original);
  });
}
var ExternalLinkIcon_default = ExternalLinkIcon;
mark_module_end(ExternalLinkIcon);

// node_modules/svelte-feather-icons/src/icons/EyeOffIcon.svelte
mark_module_start();
EyeOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/EyeOffIcon.svelte";
var root100 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>`), EyeOffIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 442]]]
]);
function EyeOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, EyeOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root100();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-eye-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EyeOffIcon = hmr(EyeOffIcon, () => EyeOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EyeOffIcon[HMR].source;
    set(EyeOffIcon[HMR].source, module.default[HMR].original);
  });
}
var EyeOffIcon_default = EyeOffIcon;
mark_module_end(EyeOffIcon);

// node_modules/svelte-feather-icons/src/icons/EyeIcon.svelte
mark_module_start();
EyeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/EyeIcon.svelte";
var root101 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>`), EyeIcon[FILENAME], [
  [14, 0, [[14, 240], [14, 302]]]
]);
function EyeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, EyeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root101();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-eye ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  EyeIcon = hmr(EyeIcon, () => EyeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EyeIcon[HMR].source;
    set(EyeIcon[HMR].source, module.default[HMR].original);
  });
}
var EyeIcon_default = EyeIcon;
mark_module_end(EyeIcon);

// node_modules/svelte-feather-icons/src/icons/FacebookIcon.svelte
mark_module_start();
FacebookIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FacebookIcon.svelte";
var root102 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>`), FacebookIcon[FILENAME], [[14, 0, [[14, 245]]]]);
function FacebookIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FacebookIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root102();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-facebook ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FacebookIcon = hmr(FacebookIcon, () => FacebookIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FacebookIcon[HMR].source;
    set(FacebookIcon[HMR].source, module.default[HMR].original);
  });
}
var FacebookIcon_default = FacebookIcon;
mark_module_end(FacebookIcon);

// node_modules/svelte-feather-icons/src/icons/FastForwardIcon.svelte
mark_module_start();
FastForwardIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FastForwardIcon.svelte";
var root103 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="13 19 22 12 13 5 13 19"></polygon><polygon points="2 19 11 12 2 5 2 19"></polygon></svg>`), FastForwardIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 300]]]
]);
function FastForwardIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FastForwardIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root103();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-fast-forward ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FastForwardIcon = hmr(FastForwardIcon, () => FastForwardIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FastForwardIcon[HMR].source;
    set(FastForwardIcon[HMR].source, module.default[HMR].original);
  });
}
var FastForwardIcon_default = FastForwardIcon;
mark_module_end(FastForwardIcon);

// node_modules/svelte-feather-icons/src/icons/FeatherIcon.svelte
mark_module_start();
FeatherIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FeatherIcon.svelte";
var root104 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M20.24 12.24a6 6 0 0 0-8.49-8.49L5 10.5V19h8.5z"></path><line x1="16" y1="8" x2="2" y2="22"></line><line x1="17.5" y1="15" x2="9" y2="15"></line></svg>`), FeatherIcon[FILENAME], [
  [
    14,
    0,
    [[14, 244], [14, 309], [14, 352]]
  ]
]);
function FeatherIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FeatherIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root104();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-feather ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FeatherIcon = hmr(FeatherIcon, () => FeatherIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FeatherIcon[HMR].source;
    set(FeatherIcon[HMR].source, module.default[HMR].original);
  });
}
var FeatherIcon_default = FeatherIcon;
mark_module_end(FeatherIcon);

// node_modules/svelte-feather-icons/src/icons/FigmaIcon.svelte
mark_module_start();
FigmaIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FigmaIcon.svelte";
var root105 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z"></path><path d="M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z"></path><path d="M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z"></path><path d="M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z"></path><path d="M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z"></path></svg>`), FigmaIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 242],
      [14, 316],
      [14, 367],
      [14, 430],
      [14, 502]
    ]
  ]
]);
function FigmaIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FigmaIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root105();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-figma ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FigmaIcon = hmr(FigmaIcon, () => FigmaIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FigmaIcon[HMR].source;
    set(FigmaIcon[HMR].source, module.default[HMR].original);
  });
}
var FigmaIcon_default = FigmaIcon;
mark_module_end(FigmaIcon);

// node_modules/svelte-feather-icons/src/icons/FileMinusIcon.svelte
mark_module_start();
FileMinusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FileMinusIcon.svelte";
var root106 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="9" y1="15" x2="15" y2="15"></line></svg>`), FileMinusIcon[FILENAME], [
  [
    14,
    0,
    [[14, 247], [14, 323], [14, 368]]
  ]
]);
function FileMinusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FileMinusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root106();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-file-minus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileMinusIcon = hmr(FileMinusIcon, () => FileMinusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileMinusIcon[HMR].source;
    set(FileMinusIcon[HMR].source, module.default[HMR].original);
  });
}
var FileMinusIcon_default = FileMinusIcon;
mark_module_end(FileMinusIcon);

// node_modules/svelte-feather-icons/src/icons/FilePlusIcon.svelte
mark_module_start();
FilePlusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FilePlusIcon.svelte";
var root107 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="12" y1="18" x2="12" y2="12"></line><line x1="9" y1="15" x2="15" y2="15"></line></svg>`), FilePlusIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 246],
      [14, 322],
      [14, 367],
      [14, 412]
    ]
  ]
]);
function FilePlusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FilePlusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root107();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-file-plus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilePlusIcon = hmr(FilePlusIcon, () => FilePlusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilePlusIcon[HMR].source;
    set(FilePlusIcon[HMR].source, module.default[HMR].original);
  });
}
var FilePlusIcon_default = FilePlusIcon;
mark_module_end(FilePlusIcon);

// node_modules/svelte-feather-icons/src/icons/FileTextIcon.svelte
mark_module_start();
FileTextIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FileTextIcon.svelte";
var root108 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path><polyline points="14 2 14 8 20 8"></polyline><line x1="16" y1="13" x2="8" y2="13"></line><line x1="16" y1="17" x2="8" y2="17"></line><polyline points="10 9 9 9 8 9"></polyline></svg>`), FileTextIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 246],
      [14, 322],
      [14, 367],
      [14, 411],
      [14, 455]
    ]
  ]
]);
function FileTextIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FileTextIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root108();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-file-text ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileTextIcon = hmr(FileTextIcon, () => FileTextIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileTextIcon[HMR].source;
    set(FileTextIcon[HMR].source, module.default[HMR].original);
  });
}
var FileTextIcon_default = FileTextIcon;
mark_module_end(FileTextIcon);

// node_modules/svelte-feather-icons/src/icons/FileIcon.svelte
mark_module_start();
FileIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FileIcon.svelte";
var root109 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M13 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V9z"></path><polyline points="13 2 13 9 20 9"></polyline></svg>`), FileIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 317]]]
]);
function FileIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FileIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root109();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-file ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FileIcon = hmr(FileIcon, () => FileIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FileIcon[HMR].source;
    set(FileIcon[HMR].source, module.default[HMR].original);
  });
}
var FileIcon_default = FileIcon;
mark_module_end(FileIcon);

// node_modules/svelte-feather-icons/src/icons/FilmIcon.svelte
mark_module_start();
FilmIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FilmIcon.svelte";
var root110 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="2" width="20" height="20" rx="2.18" ry="2.18"></rect><line x1="7" y1="2" x2="7" y2="22"></line><line x1="17" y1="2" x2="17" y2="22"></line><line x1="2" y1="12" x2="22" y2="12"></line><line x1="2" y1="7" x2="7" y2="7"></line><line x1="2" y1="17" x2="7" y2="17"></line><line x1="17" y1="17" x2="22" y2="17"></line><line x1="17" y1="7" x2="22" y2="7"></line></svg>`), FilmIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 241],
      [14, 309],
      [14, 351],
      [14, 395],
      [14, 439],
      [14, 480],
      [14, 523],
      [14, 568]
    ]
  ]
]);
function FilmIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FilmIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root110();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-film ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilmIcon = hmr(FilmIcon, () => FilmIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilmIcon[HMR].source;
    set(FilmIcon[HMR].source, module.default[HMR].original);
  });
}
var FilmIcon_default = FilmIcon;
mark_module_end(FilmIcon);

// node_modules/svelte-feather-icons/src/icons/FilterIcon.svelte
mark_module_start();
FilterIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FilterIcon.svelte";
var root111 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon></svg>`), FilterIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function FilterIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FilterIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root111();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-filter ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FilterIcon = hmr(FilterIcon, () => FilterIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FilterIcon[HMR].source;
    set(FilterIcon[HMR].source, module.default[HMR].original);
  });
}
var FilterIcon_default = FilterIcon;
mark_module_end(FilterIcon);

// node_modules/svelte-feather-icons/src/icons/FlagIcon.svelte
mark_module_start();
FlagIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FlagIcon.svelte";
var root112 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"></path><line x1="4" y1="22" x2="4" y2="15"></line></svg>`), FlagIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 316]]]
]);
function FlagIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FlagIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root112();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-flag ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FlagIcon = hmr(FlagIcon, () => FlagIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FlagIcon[HMR].source;
    set(FlagIcon[HMR].source, module.default[HMR].original);
  });
}
var FlagIcon_default = FlagIcon;
mark_module_end(FlagIcon);

// node_modules/svelte-feather-icons/src/icons/FolderMinusIcon.svelte
mark_module_start();
FolderMinusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FolderMinusIcon.svelte";
var root113 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path><line x1="9" y1="14" x2="15" y2="14"></line></svg>`), FolderMinusIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 342]]]
]);
function FolderMinusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FolderMinusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root113();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-folder-minus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderMinusIcon = hmr(FolderMinusIcon, () => FolderMinusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderMinusIcon[HMR].source;
    set(FolderMinusIcon[HMR].source, module.default[HMR].original);
  });
}
var FolderMinusIcon_default = FolderMinusIcon;
mark_module_end(FolderMinusIcon);

// node_modules/svelte-feather-icons/src/icons/FolderPlusIcon.svelte
mark_module_start();
FolderPlusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FolderPlusIcon.svelte";
var root114 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path><line x1="12" y1="11" x2="12" y2="17"></line><line x1="9" y1="14" x2="15" y2="14"></line></svg>`), FolderPlusIcon[FILENAME], [
  [
    14,
    0,
    [[14, 248], [14, 341], [14, 386]]
  ]
]);
function FolderPlusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FolderPlusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root114();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-folder-plus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderPlusIcon = hmr(FolderPlusIcon, () => FolderPlusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderPlusIcon[HMR].source;
    set(FolderPlusIcon[HMR].source, module.default[HMR].original);
  });
}
var FolderPlusIcon_default = FolderPlusIcon;
mark_module_end(FolderPlusIcon);

// node_modules/svelte-feather-icons/src/icons/FolderIcon.svelte
mark_module_start();
FolderIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FolderIcon.svelte";
var root115 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path></svg>`), FolderIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function FolderIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FolderIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root115();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-folder ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FolderIcon = hmr(FolderIcon, () => FolderIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FolderIcon[HMR].source;
    set(FolderIcon[HMR].source, module.default[HMR].original);
  });
}
var FolderIcon_default = FolderIcon;
mark_module_end(FolderIcon);

// node_modules/svelte-feather-icons/src/icons/FramerIcon.svelte
mark_module_start();
FramerIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FramerIcon.svelte";
var root116 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M5 16V9h14V2H5l14 14h-7m-7 0l7 7v-7m-7 0h7"></path></svg>`), FramerIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function FramerIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FramerIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root116();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-framer ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FramerIcon = hmr(FramerIcon, () => FramerIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FramerIcon[HMR].source;
    set(FramerIcon[HMR].source, module.default[HMR].original);
  });
}
var FramerIcon_default = FramerIcon;
mark_module_end(FramerIcon);

// node_modules/svelte-feather-icons/src/icons/FrownIcon.svelte
mark_module_start();
FrownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/FrownIcon.svelte";
var root117 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M16 16s-1.5-2-4-2-4 2-4 2"></path><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line></svg>`), FrownIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 242],
      [14, 282],
      [14, 325],
      [14, 369]
    ]
  ]
]);
function FrownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, FrownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root117();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-frown ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  FrownIcon = hmr(FrownIcon, () => FrownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FrownIcon[HMR].source;
    set(FrownIcon[HMR].source, module.default[HMR].original);
  });
}
var FrownIcon_default = FrownIcon;
mark_module_end(FrownIcon);

// node_modules/svelte-feather-icons/src/icons/GiftIcon.svelte
mark_module_start();
GiftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GiftIcon.svelte";
var root118 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 12 20 22 4 22 4 12"></polyline><rect x="2" y="7" width="20" height="5"></rect><line x1="12" y1="22" x2="12" y2="7"></line><path d="M12 7H7.5a2.5 2.5 0 0 1 0-5C11 2 12 7 12 7z"></path><path d="M12 7h4.5a2.5 2.5 0 0 0 0-5C13 2 12 7 12 7z"></path></svg>`), GiftIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 241],
      [14, 293],
      [14, 340],
      [14, 384],
      [14, 445]
    ]
  ]
]);
function GiftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GiftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root118();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-gift ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GiftIcon = hmr(GiftIcon, () => GiftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GiftIcon[HMR].source;
    set(GiftIcon[HMR].source, module.default[HMR].original);
  });
}
var GiftIcon_default = GiftIcon;
mark_module_end(GiftIcon);

// node_modules/svelte-feather-icons/src/icons/GitBranchIcon.svelte
mark_module_start();
GitBranchIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GitBranchIcon.svelte";
var root119 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="6" y1="3" x2="6" y2="15"></line><circle cx="18" cy="6" r="3"></circle><circle cx="6" cy="18" r="3"></circle><path d="M18 9a9 9 0 0 1-9 9"></path></svg>`), GitBranchIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 247],
      [14, 289],
      [14, 327],
      [14, 365]
    ]
  ]
]);
function GitBranchIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GitBranchIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root119();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-git-branch ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GitBranchIcon = hmr(GitBranchIcon, () => GitBranchIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GitBranchIcon[HMR].source;
    set(GitBranchIcon[HMR].source, module.default[HMR].original);
  });
}
var GitBranchIcon_default = GitBranchIcon;
mark_module_end(GitBranchIcon);

// node_modules/svelte-feather-icons/src/icons/GitCommitIcon.svelte
mark_module_start();
GitCommitIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GitCommitIcon.svelte";
var root120 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="4"></circle><line x1="1.05" y1="12" x2="7" y2="12"></line><line x1="17.01" y1="12" x2="22.96" y2="12"></line></svg>`), GitCommitIcon[FILENAME], [
  [
    14,
    0,
    [[14, 247], [14, 286], [14, 332]]
  ]
]);
function GitCommitIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GitCommitIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root120();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-git-commit ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GitCommitIcon = hmr(GitCommitIcon, () => GitCommitIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GitCommitIcon[HMR].source;
    set(GitCommitIcon[HMR].source, module.default[HMR].original);
  });
}
var GitCommitIcon_default = GitCommitIcon;
mark_module_end(GitCommitIcon);

// node_modules/svelte-feather-icons/src/icons/GitMergeIcon.svelte
mark_module_start();
GitMergeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GitMergeIcon.svelte";
var root121 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="18" cy="18" r="3"></circle><circle cx="6" cy="6" r="3"></circle><path d="M6 21V9a9 9 0 0 0 9 9"></path></svg>`), GitMergeIcon[FILENAME], [
  [
    14,
    0,
    [[14, 246], [14, 285], [14, 322]]
  ]
]);
function GitMergeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GitMergeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root121();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-git-merge ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GitMergeIcon = hmr(GitMergeIcon, () => GitMergeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GitMergeIcon[HMR].source;
    set(GitMergeIcon[HMR].source, module.default[HMR].original);
  });
}
var GitMergeIcon_default = GitMergeIcon;
mark_module_end(GitMergeIcon);

// node_modules/svelte-feather-icons/src/icons/GitPullRequestIcon.svelte
mark_module_start();
GitPullRequestIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GitPullRequestIcon.svelte";
var root122 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="18" cy="18" r="3"></circle><circle cx="6" cy="6" r="3"></circle><path d="M13 6h3a2 2 0 0 1 2 2v7"></path><line x1="6" y1="9" x2="6" y2="21"></line></svg>`), GitPullRequestIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 253],
      [14, 292],
      [14, 329],
      [14, 370]
    ]
  ]
]);
function GitPullRequestIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GitPullRequestIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root122();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-git-pull-request ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GitPullRequestIcon = hmr(GitPullRequestIcon, () => GitPullRequestIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GitPullRequestIcon[HMR].source;
    set(GitPullRequestIcon[HMR].source, module.default[HMR].original);
  });
}
var GitPullRequestIcon_default = GitPullRequestIcon;
mark_module_end(GitPullRequestIcon);

// node_modules/svelte-feather-icons/src/icons/GithubIcon.svelte
mark_module_start();
GithubIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GithubIcon.svelte";
var root123 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path></svg>`), GithubIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function GithubIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GithubIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root123();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-github ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GithubIcon = hmr(GithubIcon, () => GithubIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GithubIcon[HMR].source;
    set(GithubIcon[HMR].source, module.default[HMR].original);
  });
}
var GithubIcon_default = GithubIcon;
mark_module_end(GithubIcon);

// node_modules/svelte-feather-icons/src/icons/GitlabIcon.svelte
mark_module_start();
GitlabIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GitlabIcon.svelte";
var root124 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22.65 14.39L12 22.13 1.35 14.39a.84.84 0 0 1-.3-.94l1.22-3.78 2.44-7.51A.42.42 0 0 1 4.82 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.49h8.1l2.44-7.51A.42.42 0 0 1 18.6 2a.43.43 0 0 1 .58 0 .42.42 0 0 1 .11.18l2.44 7.51L23 13.45a.84.84 0 0 1-.35.94z"></path></svg>`), GitlabIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function GitlabIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GitlabIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root124();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-gitlab ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GitlabIcon = hmr(GitlabIcon, () => GitlabIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GitlabIcon[HMR].source;
    set(GitlabIcon[HMR].source, module.default[HMR].original);
  });
}
var GitlabIcon_default = GitlabIcon;
mark_module_end(GitlabIcon);

// node_modules/svelte-feather-icons/src/icons/GlobeIcon.svelte
mark_module_start();
GlobeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GlobeIcon.svelte";
var root125 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="2" y1="12" x2="22" y2="12"></line><path d="M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"></path></svg>`), GlobeIcon[FILENAME], [
  [
    14,
    0,
    [[14, 242], [14, 282], [14, 326]]
  ]
]);
function GlobeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GlobeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root125();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-globe ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GlobeIcon = hmr(GlobeIcon, () => GlobeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GlobeIcon[HMR].source;
    set(GlobeIcon[HMR].source, module.default[HMR].original);
  });
}
var GlobeIcon_default = GlobeIcon;
mark_module_end(GlobeIcon);

// node_modules/svelte-feather-icons/src/icons/GridIcon.svelte
mark_module_start();
GridIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/GridIcon.svelte";
var root126 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="7" height="7"></rect><rect x="14" y="3" width="7" height="7"></rect><rect x="14" y="14" width="7" height="7"></rect><rect x="3" y="14" width="7" height="7"></rect></svg>`), GridIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 241],
      [14, 287],
      [14, 334],
      [14, 382]
    ]
  ]
]);
function GridIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, GridIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root126();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-grid ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  GridIcon = hmr(GridIcon, () => GridIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GridIcon[HMR].source;
    set(GridIcon[HMR].source, module.default[HMR].original);
  });
}
var GridIcon_default = GridIcon;
mark_module_end(GridIcon);

// node_modules/svelte-feather-icons/src/icons/HardDriveIcon.svelte
mark_module_start();
HardDriveIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/HardDriveIcon.svelte";
var root127 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="12" x2="2" y2="12"></line><path d="M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path><line x1="6" y1="16" x2="6.01" y2="16"></line><line x1="10" y1="16" x2="10.01" y2="16"></line></svg>`), HardDriveIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 247],
      [14, 291],
      [14, 415],
      [14, 461]
    ]
  ]
]);
function HardDriveIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, HardDriveIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root127();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-hard-drive ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HardDriveIcon = hmr(HardDriveIcon, () => HardDriveIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HardDriveIcon[HMR].source;
    set(HardDriveIcon[HMR].source, module.default[HMR].original);
  });
}
var HardDriveIcon_default = HardDriveIcon;
mark_module_end(HardDriveIcon);

// node_modules/svelte-feather-icons/src/icons/HashIcon.svelte
mark_module_start();
HashIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/HashIcon.svelte";
var root128 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="4" y1="9" x2="20" y2="9"></line><line x1="4" y1="15" x2="20" y2="15"></line><line x1="10" y1="3" x2="8" y2="21"></line><line x1="16" y1="3" x2="14" y2="21"></line></svg>`), HashIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 241],
      [14, 283],
      [14, 327],
      [14, 370]
    ]
  ]
]);
function HashIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, HashIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root128();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-hash ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HashIcon = hmr(HashIcon, () => HashIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HashIcon[HMR].source;
    set(HashIcon[HMR].source, module.default[HMR].original);
  });
}
var HashIcon_default = HashIcon;
mark_module_end(HashIcon);

// node_modules/svelte-feather-icons/src/icons/HeadphonesIcon.svelte
mark_module_start();
HeadphonesIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/HeadphonesIcon.svelte";
var root129 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M3 18v-6a9 9 0 0 1 18 0v6"></path><path d="M21 19a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3zM3 19a2 2 0 0 0 2 2h1a2 2 0 0 0 2-2v-3a2 2 0 0 0-2-2H3z"></path></svg>`), HeadphonesIcon[FILENAME], [
  [14, 0, [[14, 247], [14, 290]]]
]);
function HeadphonesIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, HeadphonesIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root129();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-headphones ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeadphonesIcon = hmr(HeadphonesIcon, () => HeadphonesIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeadphonesIcon[HMR].source;
    set(HeadphonesIcon[HMR].source, module.default[HMR].original);
  });
}
var HeadphonesIcon_default = HeadphonesIcon;
mark_module_end(HeadphonesIcon);

// node_modules/svelte-feather-icons/src/icons/HeartIcon.svelte
mark_module_start();
HeartIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/HeartIcon.svelte";
var root130 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path></svg>`), HeartIcon[FILENAME], [[14, 0, [[14, 242]]]]);
function HeartIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, HeartIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root130();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-heart ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HeartIcon = hmr(HeartIcon, () => HeartIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HeartIcon[HMR].source;
    set(HeartIcon[HMR].source, module.default[HMR].original);
  });
}
var HeartIcon_default = HeartIcon;
mark_module_end(HeartIcon);

// node_modules/svelte-feather-icons/src/icons/HelpCircleIcon.svelte
mark_module_start();
HelpCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/HelpCircleIcon.svelte";
var root131 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path><line x1="12" y1="17" x2="12.01" y2="17"></line></svg>`), HelpCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 248], [14, 288], [14, 342]]
  ]
]);
function HelpCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, HelpCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root131();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-help-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HelpCircleIcon = hmr(HelpCircleIcon, () => HelpCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HelpCircleIcon[HMR].source;
    set(HelpCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var HelpCircleIcon_default = HelpCircleIcon;
mark_module_end(HelpCircleIcon);

// node_modules/svelte-feather-icons/src/icons/HexagonIcon.svelte
mark_module_start();
HexagonIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/HexagonIcon.svelte";
var root132 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path></svg>`), HexagonIcon[FILENAME], [[14, 0, [[14, 244]]]]);
function HexagonIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, HexagonIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root132();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-hexagon ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HexagonIcon = hmr(HexagonIcon, () => HexagonIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HexagonIcon[HMR].source;
    set(HexagonIcon[HMR].source, module.default[HMR].original);
  });
}
var HexagonIcon_default = HexagonIcon;
mark_module_end(HexagonIcon);

// node_modules/svelte-feather-icons/src/icons/HomeIcon.svelte
mark_module_start();
HomeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/HomeIcon.svelte";
var root133 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>`), HomeIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 305]]]
]);
function HomeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, HomeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root133();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-home ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  HomeIcon = hmr(HomeIcon, () => HomeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = HomeIcon[HMR].source;
    set(HomeIcon[HMR].source, module.default[HMR].original);
  });
}
var HomeIcon_default = HomeIcon;
mark_module_end(HomeIcon);

// node_modules/svelte-feather-icons/src/icons/ImageIcon.svelte
mark_module_start();
ImageIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ImageIcon.svelte";
var root134 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle cx="8.5" cy="8.5" r="1.5"></circle><polyline points="21 15 16 10 5 21"></polyline></svg>`), ImageIcon[FILENAME], [
  [
    14,
    0,
    [[14, 242], [14, 304], [14, 347]]
  ]
]);
function ImageIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ImageIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root134();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-image ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ImageIcon = hmr(ImageIcon, () => ImageIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ImageIcon[HMR].source;
    set(ImageIcon[HMR].source, module.default[HMR].original);
  });
}
var ImageIcon_default = ImageIcon;
mark_module_end(ImageIcon);

// node_modules/svelte-feather-icons/src/icons/InboxIcon.svelte
mark_module_start();
InboxIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/InboxIcon.svelte";
var root135 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="22 12 16 12 14 15 10 15 8 12 2 12"></polyline><path d="M5.45 5.11L2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"></path></svg>`), InboxIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 306]]]
]);
function InboxIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, InboxIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root135();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-inbox ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InboxIcon = hmr(InboxIcon, () => InboxIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InboxIcon[HMR].source;
    set(InboxIcon[HMR].source, module.default[HMR].original);
  });
}
var InboxIcon_default = InboxIcon;
mark_module_end(InboxIcon);

// node_modules/svelte-feather-icons/src/icons/InfoIcon.svelte
mark_module_start();
InfoIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/InfoIcon.svelte";
var root136 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="16" x2="12" y2="12"></line><line x1="12" y1="8" x2="12.01" y2="8"></line></svg>`), InfoIcon[FILENAME], [
  [
    14,
    0,
    [[14, 241], [14, 281], [14, 326]]
  ]
]);
function InfoIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, InfoIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root136();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-info ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InfoIcon = hmr(InfoIcon, () => InfoIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InfoIcon[HMR].source;
    set(InfoIcon[HMR].source, module.default[HMR].original);
  });
}
var InfoIcon_default = InfoIcon;
mark_module_end(InfoIcon);

// node_modules/svelte-feather-icons/src/icons/InstagramIcon.svelte
mark_module_start();
InstagramIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/InstagramIcon.svelte";
var root137 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line></svg>`), InstagramIcon[FILENAME], [
  [
    14,
    0,
    [[14, 246], [14, 308], [14, 373]]
  ]
]);
function InstagramIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, InstagramIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root137();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-instagram ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  InstagramIcon = hmr(InstagramIcon, () => InstagramIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InstagramIcon[HMR].source;
    set(InstagramIcon[HMR].source, module.default[HMR].original);
  });
}
var InstagramIcon_default = InstagramIcon;
mark_module_end(InstagramIcon);

// node_modules/svelte-feather-icons/src/icons/ItalicIcon.svelte
mark_module_start();
ItalicIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ItalicIcon.svelte";
var root138 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="19" y1="4" x2="10" y2="4"></line><line x1="14" y1="20" x2="5" y2="20"></line><line x1="15" y1="4" x2="9" y2="20"></line></svg>`), ItalicIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 286], [14, 330]]
  ]
]);
function ItalicIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ItalicIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root138();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-italic ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ItalicIcon = hmr(ItalicIcon, () => ItalicIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ItalicIcon[HMR].source;
    set(ItalicIcon[HMR].source, module.default[HMR].original);
  });
}
var ItalicIcon_default = ItalicIcon;
mark_module_end(ItalicIcon);

// node_modules/svelte-feather-icons/src/icons/KeyIcon.svelte
mark_module_start();
KeyIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/KeyIcon.svelte";
var root139 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"></path></svg>`), KeyIcon[FILENAME], [[14, 0, [[14, 240]]]]);
function KeyIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, KeyIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root139();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-key ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  KeyIcon = hmr(KeyIcon, () => KeyIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = KeyIcon[HMR].source;
    set(KeyIcon[HMR].source, module.default[HMR].original);
  });
}
var KeyIcon_default = KeyIcon;
mark_module_end(KeyIcon);

// node_modules/svelte-feather-icons/src/icons/LayersIcon.svelte
mark_module_start();
LayersIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LayersIcon.svelte";
var root140 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 2 7 12 12 22 7 12 2"></polygon><polyline points="2 17 12 22 22 17"></polyline><polyline points="2 12 12 17 22 12"></polyline></svg>`), LayersIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 296], [14, 343]]
  ]
]);
function LayersIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LayersIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root140();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-layers ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayersIcon = hmr(LayersIcon, () => LayersIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayersIcon[HMR].source;
    set(LayersIcon[HMR].source, module.default[HMR].original);
  });
}
var LayersIcon_default = LayersIcon;
mark_module_end(LayersIcon);

// node_modules/svelte-feather-icons/src/icons/LayoutIcon.svelte
mark_module_start();
LayoutIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LayoutIcon.svelte";
var root141 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>`), LayoutIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 305], [14, 347]]
  ]
]);
function LayoutIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LayoutIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root141();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-layout ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LayoutIcon = hmr(LayoutIcon, () => LayoutIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LayoutIcon[HMR].source;
    set(LayoutIcon[HMR].source, module.default[HMR].original);
  });
}
var LayoutIcon_default = LayoutIcon;
mark_module_end(LayoutIcon);

// node_modules/svelte-feather-icons/src/icons/LifeBuoyIcon.svelte
mark_module_start();
LifeBuoyIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LifeBuoyIcon.svelte";
var root142 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="4"></circle><line x1="4.93" y1="4.93" x2="9.17" y2="9.17"></line><line x1="14.83" y1="14.83" x2="19.07" y2="19.07"></line><line x1="14.83" y1="9.17" x2="19.07" y2="4.93"></line><line x1="14.83" y1="9.17" x2="18.36" y2="5.64"></line><line x1="4.93" y1="19.07" x2="9.17" y2="14.83"></line></svg>`), LifeBuoyIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 246],
      [14, 286],
      [14, 325],
      [14, 378],
      [14, 435],
      [14, 490],
      [14, 545]
    ]
  ]
]);
function LifeBuoyIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LifeBuoyIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root142();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-life-buoy ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LifeBuoyIcon = hmr(LifeBuoyIcon, () => LifeBuoyIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LifeBuoyIcon[HMR].source;
    set(LifeBuoyIcon[HMR].source, module.default[HMR].original);
  });
}
var LifeBuoyIcon_default = LifeBuoyIcon;
mark_module_end(LifeBuoyIcon);

// node_modules/svelte-feather-icons/src/icons/Link2Icon.svelte
mark_module_start();
Link2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Link2Icon.svelte";
var root143 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path><line x1="8" y1="12" x2="16" y2="12"></line></svg>`), Link2Icon[FILENAME], [
  [14, 0, [[14, 243], [14, 336]]]
]);
function Link2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Link2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root143();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-link-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Link2Icon = hmr(Link2Icon, () => Link2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Link2Icon[HMR].source;
    set(Link2Icon[HMR].source, module.default[HMR].original);
  });
}
var Link2Icon_default = Link2Icon;
mark_module_end(Link2Icon);

// node_modules/svelte-feather-icons/src/icons/LinkIcon.svelte
mark_module_start();
LinkIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LinkIcon.svelte";
var root144 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path><path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path></svg>`), LinkIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 318]]]
]);
function LinkIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LinkIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root144();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-link ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LinkIcon = hmr(LinkIcon, () => LinkIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LinkIcon[HMR].source;
    set(LinkIcon[HMR].source, module.default[HMR].original);
  });
}
var LinkIcon_default = LinkIcon;
mark_module_end(LinkIcon);

// node_modules/svelte-feather-icons/src/icons/LinkedinIcon.svelte
mark_module_start();
LinkedinIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LinkedinIcon.svelte";
var root145 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg>`), LinkedinIcon[FILENAME], [
  [
    14,
    0,
    [[14, 245], [14, 341], [14, 388]]
  ]
]);
function LinkedinIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LinkedinIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root145();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-linkedin ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LinkedinIcon = hmr(LinkedinIcon, () => LinkedinIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LinkedinIcon[HMR].source;
    set(LinkedinIcon[HMR].source, module.default[HMR].original);
  });
}
var LinkedinIcon_default = LinkedinIcon;
mark_module_end(LinkedinIcon);

// node_modules/svelte-feather-icons/src/icons/ListIcon.svelte
mark_module_start();
ListIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ListIcon.svelte";
var root146 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="8" y1="6" x2="21" y2="6"></line><line x1="8" y1="12" x2="21" y2="12"></line><line x1="8" y1="18" x2="21" y2="18"></line><line x1="3" y1="6" x2="3.01" y2="6"></line><line x1="3" y1="12" x2="3.01" y2="12"></line><line x1="3" y1="18" x2="3.01" y2="18"></line></svg>`), ListIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 241],
      [14, 283],
      [14, 327],
      [14, 371],
      [14, 415],
      [14, 461]
    ]
  ]
]);
function ListIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ListIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root146();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-list ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ListIcon = hmr(ListIcon, () => ListIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListIcon[HMR].source;
    set(ListIcon[HMR].source, module.default[HMR].original);
  });
}
var ListIcon_default = ListIcon;
mark_module_end(ListIcon);

// node_modules/svelte-feather-icons/src/icons/LoaderIcon.svelte
mark_module_start();
LoaderIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LoaderIcon.svelte";
var root147 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="2" x2="12" y2="6"></line><line x1="12" y1="18" x2="12" y2="22"></line><line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line><line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line><line x1="2" y1="12" x2="6" y2="12"></line><line x1="18" y1="12" x2="22" y2="12"></line><line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line><line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line></svg>`), LoaderIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 243],
      [14, 286],
      [14, 331],
      [14, 384],
      [14, 441],
      [14, 484],
      [14, 529],
      [14, 584]
    ]
  ]
]);
function LoaderIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LoaderIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root147();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-loader ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LoaderIcon = hmr(LoaderIcon, () => LoaderIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LoaderIcon[HMR].source;
    set(LoaderIcon[HMR].source, module.default[HMR].original);
  });
}
var LoaderIcon_default = LoaderIcon;
mark_module_end(LoaderIcon);

// node_modules/svelte-feather-icons/src/icons/LockIcon.svelte
mark_module_start();
LockIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LockIcon.svelte";
var root148 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>`), LockIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 304]]]
]);
function LockIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LockIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root148();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-lock ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LockIcon = hmr(LockIcon, () => LockIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LockIcon[HMR].source;
    set(LockIcon[HMR].source, module.default[HMR].original);
  });
}
var LockIcon_default = LockIcon;
mark_module_end(LockIcon);

// node_modules/svelte-feather-icons/src/icons/LogInIcon.svelte
mark_module_start();
LogInIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LogInIcon.svelte";
var root149 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path><polyline points="10 17 15 12 10 7"></polyline><line x1="15" y1="12" x2="3" y2="12"></line></svg>`), LogInIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 302], [14, 349]]
  ]
]);
function LogInIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LogInIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root149();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-log-in ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LogInIcon = hmr(LogInIcon, () => LogInIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LogInIcon[HMR].source;
    set(LogInIcon[HMR].source, module.default[HMR].original);
  });
}
var LogInIcon_default = LogInIcon;
mark_module_end(LogInIcon);

// node_modules/svelte-feather-icons/src/icons/LogOutIcon.svelte
mark_module_start();
LogOutIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/LogOutIcon.svelte";
var root150 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>`), LogOutIcon[FILENAME], [
  [
    14,
    0,
    [[14, 244], [14, 301], [14, 348]]
  ]
]);
function LogOutIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LogOutIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root150();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-log-out ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LogOutIcon = hmr(LogOutIcon, () => LogOutIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LogOutIcon[HMR].source;
    set(LogOutIcon[HMR].source, module.default[HMR].original);
  });
}
var LogOutIcon_default = LogOutIcon;
mark_module_end(LogOutIcon);

// node_modules/svelte-feather-icons/src/icons/MailIcon.svelte
mark_module_start();
MailIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MailIcon.svelte";
var root151 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>`), MailIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 334]]]
]);
function MailIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MailIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root151();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-mail ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MailIcon = hmr(MailIcon, () => MailIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MailIcon[HMR].source;
    set(MailIcon[HMR].source, module.default[HMR].original);
  });
}
var MailIcon_default = MailIcon;
mark_module_end(MailIcon);

// node_modules/svelte-feather-icons/src/icons/MapPinIcon.svelte
mark_module_start();
MapPinIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MapPinIcon.svelte";
var root152 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path><circle cx="12" cy="10" r="3"></circle></svg>`), MapPinIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 308]]]
]);
function MapPinIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MapPinIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root152();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-map-pin ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MapPinIcon = hmr(MapPinIcon, () => MapPinIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MapPinIcon[HMR].source;
    set(MapPinIcon[HMR].source, module.default[HMR].original);
  });
}
var MapPinIcon_default = MapPinIcon;
mark_module_end(MapPinIcon);

// node_modules/svelte-feather-icons/src/icons/MapIcon.svelte
mark_module_start();
MapIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MapIcon.svelte";
var root153 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="1 6 1 22 8 18 16 22 23 18 23 2 16 6 8 2 1 6"></polygon><line x1="8" y1="2" x2="8" y2="18"></line><line x1="16" y1="6" x2="16" y2="22"></line></svg>`), MapIcon[FILENAME], [
  [
    14,
    0,
    [[14, 240], [14, 312], [14, 354]]
  ]
]);
function MapIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MapIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root153();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-map ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MapIcon = hmr(MapIcon, () => MapIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MapIcon[HMR].source;
    set(MapIcon[HMR].source, module.default[HMR].original);
  });
}
var MapIcon_default = MapIcon;
mark_module_end(MapIcon);

// node_modules/svelte-feather-icons/src/icons/Maximize2Icon.svelte
mark_module_start();
Maximize2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Maximize2Icon.svelte";
var root154 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 3 21 3 21 9"></polyline><polyline points="9 21 3 21 3 15"></polyline><line x1="21" y1="3" x2="14" y2="10"></line><line x1="3" y1="21" x2="10" y2="14"></line></svg>`), Maximize2Icon[FILENAME], [
  [
    14,
    0,
    [
      [14, 247],
      [14, 292],
      [14, 337],
      [14, 381]
    ]
  ]
]);
function Maximize2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Maximize2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root154();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-maximize-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Maximize2Icon = hmr(Maximize2Icon, () => Maximize2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Maximize2Icon[HMR].source;
    set(Maximize2Icon[HMR].source, module.default[HMR].original);
  });
}
var Maximize2Icon_default = Maximize2Icon;
mark_module_end(Maximize2Icon);

// node_modules/svelte-feather-icons/src/icons/MaximizeIcon.svelte
mark_module_start();
MaximizeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MaximizeIcon.svelte";
var root155 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3H5a2 2 0 0 0-2 2v3m18 0V5a2 2 0 0 0-2-2h-3m0 18h3a2 2 0 0 0 2-2v-3M3 16v3a2 2 0 0 0 2 2h3"></path></svg>`), MaximizeIcon[FILENAME], [[14, 0, [[14, 245]]]]);
function MaximizeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MaximizeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root155();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-maximize ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MaximizeIcon = hmr(MaximizeIcon, () => MaximizeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MaximizeIcon[HMR].source;
    set(MaximizeIcon[HMR].source, module.default[HMR].original);
  });
}
var MaximizeIcon_default = MaximizeIcon;
mark_module_end(MaximizeIcon);

// node_modules/svelte-feather-icons/src/icons/MehIcon.svelte
mark_module_start();
MehIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MehIcon.svelte";
var root156 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="8" y1="15" x2="16" y2="15"></line><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line></svg>`), MehIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 240],
      [14, 280],
      [14, 324],
      [14, 368]
    ]
  ]
]);
function MehIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MehIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root156();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-meh ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MehIcon = hmr(MehIcon, () => MehIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MehIcon[HMR].source;
    set(MehIcon[HMR].source, module.default[HMR].original);
  });
}
var MehIcon_default = MehIcon;
mark_module_end(MehIcon);

// node_modules/svelte-feather-icons/src/icons/MenuIcon.svelte
mark_module_start();
MenuIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MenuIcon.svelte";
var root157 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>`), MenuIcon[FILENAME], [
  [
    14,
    0,
    [[14, 241], [14, 285], [14, 327]]
  ]
]);
function MenuIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MenuIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root157();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-menu ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MenuIcon = hmr(MenuIcon, () => MenuIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MenuIcon[HMR].source;
    set(MenuIcon[HMR].source, module.default[HMR].original);
  });
}
var MenuIcon_default = MenuIcon;
mark_module_end(MenuIcon);

// node_modules/svelte-feather-icons/src/icons/MessageCircleIcon.svelte
mark_module_start();
MessageCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MessageCircleIcon.svelte";
var root158 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path></svg>`), MessageCircleIcon[FILENAME], [[14, 0, [[14, 251]]]]);
function MessageCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MessageCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root158();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-message-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MessageCircleIcon = hmr(MessageCircleIcon, () => MessageCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MessageCircleIcon[HMR].source;
    set(MessageCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var MessageCircleIcon_default = MessageCircleIcon;
mark_module_end(MessageCircleIcon);

// node_modules/svelte-feather-icons/src/icons/MessageSquareIcon.svelte
mark_module_start();
MessageSquareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MessageSquareIcon.svelte";
var root159 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path></svg>`), MessageSquareIcon[FILENAME], [[14, 0, [[14, 251]]]]);
function MessageSquareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MessageSquareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root159();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-message-square ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MessageSquareIcon = hmr(MessageSquareIcon, () => MessageSquareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MessageSquareIcon[HMR].source;
    set(MessageSquareIcon[HMR].source, module.default[HMR].original);
  });
}
var MessageSquareIcon_default = MessageSquareIcon;
mark_module_end(MessageSquareIcon);

// node_modules/svelte-feather-icons/src/icons/MicOffIcon.svelte
mark_module_start();
MicOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MicOffIcon.svelte";
var root160 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="1" y1="1" x2="23" y2="23"></line><path d="M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"></path><path d="M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line></svg>`), MicOffIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 287],
      [14, 359],
      [14, 430],
      [14, 475]
    ]
  ]
]);
function MicOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MicOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root160();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-mic-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MicOffIcon = hmr(MicOffIcon, () => MicOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MicOffIcon[HMR].source;
    set(MicOffIcon[HMR].source, module.default[HMR].original);
  });
}
var MicOffIcon_default = MicOffIcon;
mark_module_end(MicOffIcon);

// node_modules/svelte-feather-icons/src/icons/MicIcon.svelte
mark_module_start();
MicIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MicIcon.svelte";
var root161 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M12 1a3 3 0 0 0-3 3v8a3 3 0 0 0 6 0V4a3 3 0 0 0-3-3z"></path><path d="M19 10v2a7 7 0 0 1-14 0v-2"></path><line x1="12" y1="19" x2="12" y2="23"></line><line x1="8" y1="23" x2="16" y2="23"></line></svg>`), MicIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 240],
      [14, 310],
      [14, 354],
      [14, 399]
    ]
  ]
]);
function MicIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MicIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root161();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-mic ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MicIcon = hmr(MicIcon, () => MicIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MicIcon[HMR].source;
    set(MicIcon[HMR].source, module.default[HMR].original);
  });
}
var MicIcon_default = MicIcon;
mark_module_end(MicIcon);

// node_modules/svelte-feather-icons/src/icons/Minimize2Icon.svelte
mark_module_start();
Minimize2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Minimize2Icon.svelte";
var root162 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="4 14 10 14 10 20"></polyline><polyline points="20 10 14 10 14 4"></polyline><line x1="14" y1="10" x2="21" y2="3"></line><line x1="3" y1="21" x2="10" y2="14"></line></svg>`), Minimize2Icon[FILENAME], [
  [
    14,
    0,
    [
      [14, 247],
      [14, 294],
      [14, 341],
      [14, 385]
    ]
  ]
]);
function Minimize2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Minimize2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root162();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-minimize-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Minimize2Icon = hmr(Minimize2Icon, () => Minimize2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Minimize2Icon[HMR].source;
    set(Minimize2Icon[HMR].source, module.default[HMR].original);
  });
}
var Minimize2Icon_default = Minimize2Icon;
mark_module_end(Minimize2Icon);

// node_modules/svelte-feather-icons/src/icons/MinimizeIcon.svelte
mark_module_start();
MinimizeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MinimizeIcon.svelte";
var root163 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M8 3v3a2 2 0 0 1-2 2H3m18 0h-3a2 2 0 0 1-2-2V3m0 18v-3a2 2 0 0 1 2-2h3M3 16h3a2 2 0 0 1 2 2v3"></path></svg>`), MinimizeIcon[FILENAME], [[14, 0, [[14, 245]]]]);
function MinimizeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MinimizeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root163();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-minimize ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MinimizeIcon = hmr(MinimizeIcon, () => MinimizeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MinimizeIcon[HMR].source;
    set(MinimizeIcon[HMR].source, module.default[HMR].original);
  });
}
var MinimizeIcon_default = MinimizeIcon;
mark_module_end(MinimizeIcon);

// node_modules/svelte-feather-icons/src/icons/MinusCircleIcon.svelte
mark_module_start();
MinusCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MinusCircleIcon.svelte";
var root164 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="8" y1="12" x2="16" y2="12"></line></svg>`), MinusCircleIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 289]]]
]);
function MinusCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MinusCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root164();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-minus-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MinusCircleIcon = hmr(MinusCircleIcon, () => MinusCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MinusCircleIcon[HMR].source;
    set(MinusCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var MinusCircleIcon_default = MinusCircleIcon;
mark_module_end(MinusCircleIcon);

// node_modules/svelte-feather-icons/src/icons/MinusSquareIcon.svelte
mark_module_start();
MinusSquareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MinusSquareIcon.svelte";
var root165 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="8" y1="12" x2="16" y2="12"></line></svg>`), MinusSquareIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 311]]]
]);
function MinusSquareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MinusSquareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root165();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-minus-square ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MinusSquareIcon = hmr(MinusSquareIcon, () => MinusSquareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MinusSquareIcon[HMR].source;
    set(MinusSquareIcon[HMR].source, module.default[HMR].original);
  });
}
var MinusSquareIcon_default = MinusSquareIcon;
mark_module_end(MinusSquareIcon);

// node_modules/svelte-feather-icons/src/icons/MinusIcon.svelte
mark_module_start();
MinusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MinusIcon.svelte";
var root166 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="5" y1="12" x2="19" y2="12"></line></svg>`), MinusIcon[FILENAME], [[14, 0, [[14, 242]]]]);
function MinusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MinusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root166();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-minus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MinusIcon = hmr(MinusIcon, () => MinusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MinusIcon[HMR].source;
    set(MinusIcon[HMR].source, module.default[HMR].original);
  });
}
var MinusIcon_default = MinusIcon;
mark_module_end(MinusIcon);

// node_modules/svelte-feather-icons/src/icons/MonitorIcon.svelte
mark_module_start();
MonitorIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MonitorIcon.svelte";
var root167 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect><line x1="8" y1="21" x2="16" y2="21"></line><line x1="12" y1="17" x2="12" y2="21"></line></svg>`), MonitorIcon[FILENAME], [
  [
    14,
    0,
    [[14, 244], [14, 306], [14, 350]]
  ]
]);
function MonitorIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MonitorIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root167();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-monitor ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MonitorIcon = hmr(MonitorIcon, () => MonitorIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MonitorIcon[HMR].source;
    set(MonitorIcon[HMR].source, module.default[HMR].original);
  });
}
var MonitorIcon_default = MonitorIcon;
mark_module_end(MonitorIcon);

// node_modules/svelte-feather-icons/src/icons/MoonIcon.svelte
mark_module_start();
MoonIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MoonIcon.svelte";
var root168 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>`), MoonIcon[FILENAME], [[14, 0, [[14, 241]]]]);
function MoonIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MoonIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root168();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-moon ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MoonIcon = hmr(MoonIcon, () => MoonIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MoonIcon[HMR].source;
    set(MoonIcon[HMR].source, module.default[HMR].original);
  });
}
var MoonIcon_default = MoonIcon;
mark_module_end(MoonIcon);

// node_modules/svelte-feather-icons/src/icons/MoreHorizontalIcon.svelte
mark_module_start();
MoreHorizontalIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MoreHorizontalIcon.svelte";
var root169 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"></circle><circle cx="19" cy="12" r="1"></circle><circle cx="5" cy="12" r="1"></circle></svg>`), MoreHorizontalIcon[FILENAME], [
  [
    14,
    0,
    [[14, 252], [14, 291], [14, 330]]
  ]
]);
function MoreHorizontalIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MoreHorizontalIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root169();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-more-horizontal ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MoreHorizontalIcon = hmr(MoreHorizontalIcon, () => MoreHorizontalIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MoreHorizontalIcon[HMR].source;
    set(MoreHorizontalIcon[HMR].source, module.default[HMR].original);
  });
}
var MoreHorizontalIcon_default = MoreHorizontalIcon;
mark_module_end(MoreHorizontalIcon);

// node_modules/svelte-feather-icons/src/icons/MoreVerticalIcon.svelte
mark_module_start();
MoreVerticalIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MoreVerticalIcon.svelte";
var root170 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="1"></circle><circle cx="12" cy="5" r="1"></circle><circle cx="12" cy="19" r="1"></circle></svg>`), MoreVerticalIcon[FILENAME], [
  [
    14,
    0,
    [[14, 250], [14, 289], [14, 327]]
  ]
]);
function MoreVerticalIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MoreVerticalIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root170();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-more-vertical ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MoreVerticalIcon = hmr(MoreVerticalIcon, () => MoreVerticalIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MoreVerticalIcon[HMR].source;
    set(MoreVerticalIcon[HMR].source, module.default[HMR].original);
  });
}
var MoreVerticalIcon_default = MoreVerticalIcon;
mark_module_end(MoreVerticalIcon);

// node_modules/svelte-feather-icons/src/icons/MousePointerIcon.svelte
mark_module_start();
MousePointerIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MousePointerIcon.svelte";
var root171 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M3 3l7.07 16.97 2.51-7.39 7.39-2.51L3 3z"></path><path d="M13 13l6 6"></path></svg>`), MousePointerIcon[FILENAME], [
  [14, 0, [[14, 250], [14, 308]]]
]);
function MousePointerIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MousePointerIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root171();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-mouse-pointer ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MousePointerIcon = hmr(MousePointerIcon, () => MousePointerIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MousePointerIcon[HMR].source;
    set(MousePointerIcon[HMR].source, module.default[HMR].original);
  });
}
var MousePointerIcon_default = MousePointerIcon;
mark_module_end(MousePointerIcon);

// node_modules/svelte-feather-icons/src/icons/MoveIcon.svelte
mark_module_start();
MoveIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MoveIcon.svelte";
var root172 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="5 9 2 12 5 15"></polyline><polyline points="9 5 12 2 15 5"></polyline><polyline points="15 19 12 22 9 19"></polyline><polyline points="19 9 22 12 19 15"></polyline><line x1="2" y1="12" x2="22" y2="12"></line><line x1="12" y1="2" x2="12" y2="22"></line></svg>`), MoveIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 241],
      [14, 285],
      [14, 329],
      [14, 376],
      [14, 423],
      [14, 467]
    ]
  ]
]);
function MoveIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MoveIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root172();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-move ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MoveIcon = hmr(MoveIcon, () => MoveIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MoveIcon[HMR].source;
    set(MoveIcon[HMR].source, module.default[HMR].original);
  });
}
var MoveIcon_default = MoveIcon;
mark_module_end(MoveIcon);

// node_modules/svelte-feather-icons/src/icons/MusicIcon.svelte
mark_module_start();
MusicIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/MusicIcon.svelte";
var root173 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M9 18V5l12-2v13"></path><circle cx="6" cy="18" r="3"></circle><circle cx="18" cy="16" r="3"></circle></svg>`), MusicIcon[FILENAME], [
  [
    14,
    0,
    [[14, 242], [14, 275], [14, 313]]
  ]
]);
function MusicIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, MusicIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root173();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-music ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  MusicIcon = hmr(MusicIcon, () => MusicIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MusicIcon[HMR].source;
    set(MusicIcon[HMR].source, module.default[HMR].original);
  });
}
var MusicIcon_default = MusicIcon;
mark_module_end(MusicIcon);

// node_modules/svelte-feather-icons/src/icons/Navigation2Icon.svelte
mark_module_start();
Navigation2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Navigation2Icon.svelte";
var root174 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 19 21 12 17 5 21 12 2"></polygon></svg>`), Navigation2Icon[FILENAME], [[14, 0, [[14, 249]]]]);
function Navigation2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Navigation2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root174();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-navigation-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Navigation2Icon = hmr(Navigation2Icon, () => Navigation2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navigation2Icon[HMR].source;
    set(Navigation2Icon[HMR].source, module.default[HMR].original);
  });
}
var Navigation2Icon_default = Navigation2Icon;
mark_module_end(Navigation2Icon);

// node_modules/svelte-feather-icons/src/icons/NavigationIcon.svelte
mark_module_start();
NavigationIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/NavigationIcon.svelte";
var root175 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="3 11 22 2 13 21 11 13 3 11"></polygon></svg>`), NavigationIcon[FILENAME], [[14, 0, [[14, 247]]]]);
function NavigationIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, NavigationIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root175();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-navigation ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  NavigationIcon = hmr(NavigationIcon, () => NavigationIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavigationIcon[HMR].source;
    set(NavigationIcon[HMR].source, module.default[HMR].original);
  });
}
var NavigationIcon_default = NavigationIcon;
mark_module_end(NavigationIcon);

// node_modules/svelte-feather-icons/src/icons/OctagonIcon.svelte
mark_module_start();
OctagonIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/OctagonIcon.svelte";
var root176 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon></svg>`), OctagonIcon[FILENAME], [[14, 0, [[14, 244]]]]);
function OctagonIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, OctagonIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root176();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-octagon ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  OctagonIcon = hmr(OctagonIcon, () => OctagonIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = OctagonIcon[HMR].source;
    set(OctagonIcon[HMR].source, module.default[HMR].original);
  });
}
var OctagonIcon_default = OctagonIcon;
mark_module_end(OctagonIcon);

// node_modules/svelte-feather-icons/src/icons/PackageIcon.svelte
mark_module_start();
PackageIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PackageIcon.svelte";
var root177 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="16.5" y1="9.4" x2="7.5" y2="4.21"></line><path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path><polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline><line x1="12" y1="22.08" x2="12" y2="12"></line></svg>`), PackageIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 295],
      [14, 434],
      [14, 494]
    ]
  ]
]);
function PackageIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PackageIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root177();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-package ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PackageIcon = hmr(PackageIcon, () => PackageIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PackageIcon[HMR].source;
    set(PackageIcon[HMR].source, module.default[HMR].original);
  });
}
var PackageIcon_default = PackageIcon;
mark_module_end(PackageIcon);

// node_modules/svelte-feather-icons/src/icons/PaperclipIcon.svelte
mark_module_start();
PaperclipIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PaperclipIcon.svelte";
var root178 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path></svg>`), PaperclipIcon[FILENAME], [[14, 0, [[14, 246]]]]);
function PaperclipIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PaperclipIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root178();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-paperclip ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PaperclipIcon = hmr(PaperclipIcon, () => PaperclipIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaperclipIcon[HMR].source;
    set(PaperclipIcon[HMR].source, module.default[HMR].original);
  });
}
var PaperclipIcon_default = PaperclipIcon;
mark_module_end(PaperclipIcon);

// node_modules/svelte-feather-icons/src/icons/PauseCircleIcon.svelte
mark_module_start();
PauseCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PauseCircleIcon.svelte";
var root179 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="10" y1="15" x2="10" y2="9"></line><line x1="14" y1="15" x2="14" y2="9"></line></svg>`), PauseCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 249], [14, 289], [14, 333]]
  ]
]);
function PauseCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PauseCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root179();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-pause-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PauseCircleIcon = hmr(PauseCircleIcon, () => PauseCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PauseCircleIcon[HMR].source;
    set(PauseCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var PauseCircleIcon_default = PauseCircleIcon;
mark_module_end(PauseCircleIcon);

// node_modules/svelte-feather-icons/src/icons/PauseIcon.svelte
mark_module_start();
PauseIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PauseIcon.svelte";
var root180 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="6" y="4" width="4" height="16"></rect><rect x="14" y="4" width="4" height="16"></rect></svg>`), PauseIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 289]]]
]);
function PauseIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PauseIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root180();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-pause ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PauseIcon = hmr(PauseIcon, () => PauseIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PauseIcon[HMR].source;
    set(PauseIcon[HMR].source, module.default[HMR].original);
  });
}
var PauseIcon_default = PauseIcon;
mark_module_end(PauseIcon);

// node_modules/svelte-feather-icons/src/icons/PenToolIcon.svelte
mark_module_start();
PenToolIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PenToolIcon.svelte";
var root181 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M12 19l7-7 3 3-7 7-3-3z"></path><path d="M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"></path><path d="M2 2l7.586 7.586"></path><circle cx="11" cy="11" r="2"></circle></svg>`), PenToolIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 245],
      [14, 286],
      [14, 343],
      [14, 377]
    ]
  ]
]);
function PenToolIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PenToolIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root181();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-pen-tool ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PenToolIcon = hmr(PenToolIcon, () => PenToolIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PenToolIcon[HMR].source;
    set(PenToolIcon[HMR].source, module.default[HMR].original);
  });
}
var PenToolIcon_default = PenToolIcon;
mark_module_end(PenToolIcon);

// node_modules/svelte-feather-icons/src/icons/PercentIcon.svelte
mark_module_start();
PercentIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PercentIcon.svelte";
var root182 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="19" y1="5" x2="5" y2="19"></line><circle cx="6.5" cy="6.5" r="2.5"></circle><circle cx="17.5" cy="17.5" r="2.5"></circle></svg>`), PercentIcon[FILENAME], [
  [
    14,
    0,
    [[14, 244], [14, 287], [14, 330]]
  ]
]);
function PercentIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PercentIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root182();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-percent ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PercentIcon = hmr(PercentIcon, () => PercentIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PercentIcon[HMR].source;
    set(PercentIcon[HMR].source, module.default[HMR].original);
  });
}
var PercentIcon_default = PercentIcon;
mark_module_end(PercentIcon);

// node_modules/svelte-feather-icons/src/icons/PhoneCallIcon.svelte
mark_module_start();
PhoneCallIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PhoneCallIcon.svelte";
var root183 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M15.05 5A5 5 0 0 1 19 8.95M15.05 1A9 9 0 0 1 23 8.94m-1 7.98v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>`), PhoneCallIcon[FILENAME], [[14, 0, [[14, 247]]]]);
function PhoneCallIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PhoneCallIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root183();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-phone-call ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneCallIcon = hmr(PhoneCallIcon, () => PhoneCallIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneCallIcon[HMR].source;
    set(PhoneCallIcon[HMR].source, module.default[HMR].original);
  });
}
var PhoneCallIcon_default = PhoneCallIcon;
mark_module_end(PhoneCallIcon);

// node_modules/svelte-feather-icons/src/icons/PhoneForwardedIcon.svelte
mark_module_start();
PhoneForwardedIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PhoneForwardedIcon.svelte";
var root184 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="19 1 23 5 19 9"></polyline><line x1="15" y1="5" x2="23" y2="5"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>`), PhoneForwardedIcon[FILENAME], [
  [
    14,
    0,
    [[14, 252], [14, 297], [14, 340]]
  ]
]);
function PhoneForwardedIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PhoneForwardedIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root184();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-phone-forwarded ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneForwardedIcon = hmr(PhoneForwardedIcon, () => PhoneForwardedIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneForwardedIcon[HMR].source;
    set(PhoneForwardedIcon[HMR].source, module.default[HMR].original);
  });
}
var PhoneForwardedIcon_default = PhoneForwardedIcon;
mark_module_end(PhoneForwardedIcon);

// node_modules/svelte-feather-icons/src/icons/PhoneIncomingIcon.svelte
mark_module_start();
PhoneIncomingIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PhoneIncomingIcon.svelte";
var root185 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 2 16 8 22 8"></polyline><line x1="23" y1="1" x2="16" y2="8"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>`), PhoneIncomingIcon[FILENAME], [
  [
    14,
    0,
    [[14, 251], [14, 296], [14, 339]]
  ]
]);
function PhoneIncomingIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PhoneIncomingIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root185();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-phone-incoming ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneIncomingIcon = hmr(PhoneIncomingIcon, () => PhoneIncomingIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneIncomingIcon[HMR].source;
    set(PhoneIncomingIcon[HMR].source, module.default[HMR].original);
  });
}
var PhoneIncomingIcon_default = PhoneIncomingIcon;
mark_module_end(PhoneIncomingIcon);

// node_modules/svelte-feather-icons/src/icons/PhoneMissedIcon.svelte
mark_module_start();
PhoneMissedIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PhoneMissedIcon.svelte";
var root186 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="23" y1="1" x2="17" y2="7"></line><line x1="17" y1="1" x2="23" y2="7"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>`), PhoneMissedIcon[FILENAME], [
  [
    14,
    0,
    [[14, 249], [14, 292], [14, 335]]
  ]
]);
function PhoneMissedIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PhoneMissedIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root186();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-phone-missed ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneMissedIcon = hmr(PhoneMissedIcon, () => PhoneMissedIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneMissedIcon[HMR].source;
    set(PhoneMissedIcon[HMR].source, module.default[HMR].original);
  });
}
var PhoneMissedIcon_default = PhoneMissedIcon;
mark_module_end(PhoneMissedIcon);

// node_modules/svelte-feather-icons/src/icons/PhoneOffIcon.svelte
mark_module_start();
PhoneOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PhoneOffIcon.svelte";
var root187 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M10.68 13.31a16 16 0 0 0 3.41 2.6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7 2 2 0 0 1 1.72 2v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.42 19.42 0 0 1-3.33-2.67m-2.67-3.34a19.79 19.79 0 0 1-3.07-8.63A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91"></path><line x1="23" y1="1" x2="1" y2="23"></line></svg>`), PhoneOffIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 573]]]
]);
function PhoneOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PhoneOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root187();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-phone-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneOffIcon = hmr(PhoneOffIcon, () => PhoneOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneOffIcon[HMR].source;
    set(PhoneOffIcon[HMR].source, module.default[HMR].original);
  });
}
var PhoneOffIcon_default = PhoneOffIcon;
mark_module_end(PhoneOffIcon);

// node_modules/svelte-feather-icons/src/icons/PhoneOutgoingIcon.svelte
mark_module_start();
PhoneOutgoingIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PhoneOutgoingIcon.svelte";
var root188 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="23 7 23 1 17 1"></polyline><line x1="16" y1="8" x2="23" y2="1"></line><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>`), PhoneOutgoingIcon[FILENAME], [
  [
    14,
    0,
    [[14, 251], [14, 296], [14, 339]]
  ]
]);
function PhoneOutgoingIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PhoneOutgoingIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root188();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-phone-outgoing ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneOutgoingIcon = hmr(PhoneOutgoingIcon, () => PhoneOutgoingIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneOutgoingIcon[HMR].source;
    set(PhoneOutgoingIcon[HMR].source, module.default[HMR].original);
  });
}
var PhoneOutgoingIcon_default = PhoneOutgoingIcon;
mark_module_end(PhoneOutgoingIcon);

// node_modules/svelte-feather-icons/src/icons/PhoneIcon.svelte
mark_module_start();
PhoneIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PhoneIcon.svelte";
var root189 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path></svg>`), PhoneIcon[FILENAME], [[14, 0, [[14, 242]]]]);
function PhoneIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PhoneIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root189();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-phone ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PhoneIcon = hmr(PhoneIcon, () => PhoneIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneIcon[HMR].source;
    set(PhoneIcon[HMR].source, module.default[HMR].original);
  });
}
var PhoneIcon_default = PhoneIcon;
mark_module_end(PhoneIcon);

// node_modules/svelte-feather-icons/src/icons/PieChartIcon.svelte
mark_module_start();
PieChartIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PieChartIcon.svelte";
var root190 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21.21 15.89A10 10 0 1 1 8 2.83"></path><path d="M22 12A10 10 0 0 0 12 2v10z"></path></svg>`), PieChartIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 295]]]
]);
function PieChartIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PieChartIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root190();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-pie-chart ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PieChartIcon = hmr(PieChartIcon, () => PieChartIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PieChartIcon[HMR].source;
    set(PieChartIcon[HMR].source, module.default[HMR].original);
  });
}
var PieChartIcon_default = PieChartIcon;
mark_module_end(PieChartIcon);

// node_modules/svelte-feather-icons/src/icons/PlayCircleIcon.svelte
mark_module_start();
PlayCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PlayCircleIcon.svelte";
var root191 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><polygon points="10 8 16 12 10 16 10 8"></polygon></svg>`), PlayCircleIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 288]]]
]);
function PlayCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PlayCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root191();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-play-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlayCircleIcon = hmr(PlayCircleIcon, () => PlayCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlayCircleIcon[HMR].source;
    set(PlayCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var PlayCircleIcon_default = PlayCircleIcon;
mark_module_end(PlayCircleIcon);

// node_modules/svelte-feather-icons/src/icons/PlayIcon.svelte
mark_module_start();
PlayIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PlayIcon.svelte";
var root192 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 3 19 12 5 21 5 3"></polygon></svg>`), PlayIcon[FILENAME], [[14, 0, [[14, 241]]]]);
function PlayIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PlayIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root192();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-play ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlayIcon = hmr(PlayIcon, () => PlayIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlayIcon[HMR].source;
    set(PlayIcon[HMR].source, module.default[HMR].original);
  });
}
var PlayIcon_default = PlayIcon;
mark_module_end(PlayIcon);

// node_modules/svelte-feather-icons/src/icons/PlusCircleIcon.svelte
mark_module_start();
PlusCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PlusCircleIcon.svelte";
var root193 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line></svg>`), PlusCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 248], [14, 288], [14, 332]]
  ]
]);
function PlusCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PlusCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root193();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-plus-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusCircleIcon = hmr(PlusCircleIcon, () => PlusCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusCircleIcon[HMR].source;
    set(PlusCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var PlusCircleIcon_default = PlusCircleIcon;
mark_module_end(PlusCircleIcon);

// node_modules/svelte-feather-icons/src/icons/PlusSquareIcon.svelte
mark_module_start();
PlusSquareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PlusSquareIcon.svelte";
var root194 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="12" y1="8" x2="12" y2="16"></line><line x1="8" y1="12" x2="16" y2="12"></line></svg>`), PlusSquareIcon[FILENAME], [
  [
    14,
    0,
    [[14, 248], [14, 310], [14, 354]]
  ]
]);
function PlusSquareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PlusSquareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root194();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-plus-square ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusSquareIcon = hmr(PlusSquareIcon, () => PlusSquareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusSquareIcon[HMR].source;
    set(PlusSquareIcon[HMR].source, module.default[HMR].original);
  });
}
var PlusSquareIcon_default = PlusSquareIcon;
mark_module_end(PlusSquareIcon);

// node_modules/svelte-feather-icons/src/icons/PlusIcon.svelte
mark_module_start();
PlusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PlusIcon.svelte";
var root195 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>`), PlusIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 285]]]
]);
function PlusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PlusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root195();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-plus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PlusIcon = hmr(PlusIcon, () => PlusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PlusIcon[HMR].source;
    set(PlusIcon[HMR].source, module.default[HMR].original);
  });
}
var PlusIcon_default = PlusIcon;
mark_module_end(PlusIcon);

// node_modules/svelte-feather-icons/src/icons/PocketIcon.svelte
mark_module_start();
PocketIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PocketIcon.svelte";
var root196 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M4 3h16a2 2 0 0 1 2 2v6a10 10 0 0 1-10 10A10 10 0 0 1 2 11V5a2 2 0 0 1 2-2z"></path><polyline points="8 10 12 14 16 10"></polyline></svg>`), PocketIcon[FILENAME], [
  [14, 0, [[14, 243], [14, 336]]]
]);
function PocketIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PocketIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root196();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-pocket ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PocketIcon = hmr(PocketIcon, () => PocketIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PocketIcon[HMR].source;
    set(PocketIcon[HMR].source, module.default[HMR].original);
  });
}
var PocketIcon_default = PocketIcon;
mark_module_end(PocketIcon);

// node_modules/svelte-feather-icons/src/icons/PowerIcon.svelte
mark_module_start();
PowerIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PowerIcon.svelte";
var root197 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M18.36 6.64a9 9 0 1 1-12.73 0"></path><line x1="12" y1="2" x2="12" y2="12"></line></svg>`), PowerIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 289]]]
]);
function PowerIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PowerIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root197();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-power ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PowerIcon = hmr(PowerIcon, () => PowerIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PowerIcon[HMR].source;
    set(PowerIcon[HMR].source, module.default[HMR].original);
  });
}
var PowerIcon_default = PowerIcon;
mark_module_end(PowerIcon);

// node_modules/svelte-feather-icons/src/icons/PrinterIcon.svelte
mark_module_start();
PrinterIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/PrinterIcon.svelte";
var root198 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="6 9 6 2 18 2 18 9"></polyline><path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path><rect x="6" y="14" width="12" height="8"></rect></svg>`), PrinterIcon[FILENAME], [
  [
    14,
    0,
    [[14, 244], [14, 292], [14, 384]]
  ]
]);
function PrinterIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, PrinterIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root198();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-printer ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  PrinterIcon = hmr(PrinterIcon, () => PrinterIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PrinterIcon[HMR].source;
    set(PrinterIcon[HMR].source, module.default[HMR].original);
  });
}
var PrinterIcon_default = PrinterIcon;
mark_module_end(PrinterIcon);

// node_modules/svelte-feather-icons/src/icons/RadioIcon.svelte
mark_module_start();
RadioIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RadioIcon.svelte";
var root199 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="2"></circle><path d="M16.24 7.76a6 6 0 0 1 0 8.49m-8.48-.01a6 6 0 0 1 0-8.49m11.31-2.82a10 10 0 0 1 0 14.14m-14.14 0a10 10 0 0 1 0-14.14"></path></svg>`), RadioIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 281]]]
]);
function RadioIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RadioIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root199();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-radio ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RadioIcon = hmr(RadioIcon, () => RadioIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RadioIcon[HMR].source;
    set(RadioIcon[HMR].source, module.default[HMR].original);
  });
}
var RadioIcon_default = RadioIcon;
mark_module_end(RadioIcon);

// node_modules/svelte-feather-icons/src/icons/RefreshCcwIcon.svelte
mark_module_start();
RefreshCcwIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RefreshCcwIcon.svelte";
var root200 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="1 4 1 10 7 10"></polyline><polyline points="23 20 23 14 17 14"></polyline><path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path></svg>`), RefreshCcwIcon[FILENAME], [
  [
    14,
    0,
    [[14, 248], [14, 292], [14, 340]]
  ]
]);
function RefreshCcwIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RefreshCcwIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root200();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-refresh-ccw ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RefreshCcwIcon = hmr(RefreshCcwIcon, () => RefreshCcwIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RefreshCcwIcon[HMR].source;
    set(RefreshCcwIcon[HMR].source, module.default[HMR].original);
  });
}
var RefreshCcwIcon_default = RefreshCcwIcon;
mark_module_end(RefreshCcwIcon);

// node_modules/svelte-feather-icons/src/icons/RefreshCwIcon.svelte
mark_module_start();
RefreshCwIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RefreshCwIcon.svelte";
var root201 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="23 4 23 10 17 10"></polyline><polyline points="1 20 1 14 7 14"></polyline><path d="M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15"></path></svg>`), RefreshCwIcon[FILENAME], [
  [
    14,
    0,
    [[14, 247], [14, 294], [14, 339]]
  ]
]);
function RefreshCwIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RefreshCwIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root201();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-refresh-cw ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RefreshCwIcon = hmr(RefreshCwIcon, () => RefreshCwIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RefreshCwIcon[HMR].source;
    set(RefreshCwIcon[HMR].source, module.default[HMR].original);
  });
}
var RefreshCwIcon_default = RefreshCwIcon;
mark_module_end(RefreshCwIcon);

// node_modules/svelte-feather-icons/src/icons/RepeatIcon.svelte
mark_module_start();
RepeatIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RepeatIcon.svelte";
var root202 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="17 1 21 5 17 9"></polyline><path d="M3 11V9a4 4 0 0 1 4-4h14"></path><polyline points="7 23 3 19 7 15"></polyline><path d="M21 13v2a4 4 0 0 1-4 4H3"></path></svg>`), RepeatIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 243],
      [14, 288],
      [14, 330],
      [14, 375]
    ]
  ]
]);
function RepeatIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RepeatIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root202();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-repeat ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RepeatIcon = hmr(RepeatIcon, () => RepeatIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RepeatIcon[HMR].source;
    set(RepeatIcon[HMR].source, module.default[HMR].original);
  });
}
var RepeatIcon_default = RepeatIcon;
mark_module_end(RepeatIcon);

// node_modules/svelte-feather-icons/src/icons/RewindIcon.svelte
mark_module_start();
RewindIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RewindIcon.svelte";
var root203 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 19 2 12 11 5 11 19"></polygon><polygon points="22 19 13 12 22 5 22 19"></polygon></svg>`), RewindIcon[FILENAME], [
  [14, 0, [[14, 243], [14, 293]]]
]);
function RewindIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RewindIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root203();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-rewind ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RewindIcon = hmr(RewindIcon, () => RewindIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RewindIcon[HMR].source;
    set(RewindIcon[HMR].source, module.default[HMR].original);
  });
}
var RewindIcon_default = RewindIcon;
mark_module_end(RewindIcon);

// node_modules/svelte-feather-icons/src/icons/RotateCcwIcon.svelte
mark_module_start();
RotateCcwIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RotateCcwIcon.svelte";
var root204 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="1 4 1 10 7 10"></polyline><path d="M3.51 15a9 9 0 1 0 2.13-9.36L1 10"></path></svg>`), RotateCcwIcon[FILENAME], [
  [14, 0, [[14, 247], [14, 291]]]
]);
function RotateCcwIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RotateCcwIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root204();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-rotate-ccw ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RotateCcwIcon = hmr(RotateCcwIcon, () => RotateCcwIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RotateCcwIcon[HMR].source;
    set(RotateCcwIcon[HMR].source, module.default[HMR].original);
  });
}
var RotateCcwIcon_default = RotateCcwIcon;
mark_module_end(RotateCcwIcon);

// node_modules/svelte-feather-icons/src/icons/RotateCwIcon.svelte
mark_module_start();
RotateCwIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RotateCwIcon.svelte";
var root205 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="23 4 23 10 17 10"></polyline><path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path></svg>`), RotateCwIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 293]]]
]);
function RotateCwIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RotateCwIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root205();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-rotate-cw ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RotateCwIcon = hmr(RotateCwIcon, () => RotateCwIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RotateCwIcon[HMR].source;
    set(RotateCwIcon[HMR].source, module.default[HMR].original);
  });
}
var RotateCwIcon_default = RotateCwIcon;
mark_module_end(RotateCwIcon);

// node_modules/svelte-feather-icons/src/icons/RssIcon.svelte
mark_module_start();
RssIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/RssIcon.svelte";
var root206 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M4 11a9 9 0 0 1 9 9"></path><path d="M4 4a16 16 0 0 1 16 16"></path><circle cx="5" cy="19" r="1"></circle></svg>`), RssIcon[FILENAME], [
  [
    14,
    0,
    [[14, 240], [14, 277], [14, 317]]
  ]
]);
function RssIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, RssIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root206();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-rss ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  RssIcon = hmr(RssIcon, () => RssIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RssIcon[HMR].source;
    set(RssIcon[HMR].source, module.default[HMR].original);
  });
}
var RssIcon_default = RssIcon;
mark_module_end(RssIcon);

// node_modules/svelte-feather-icons/src/icons/SaveIcon.svelte
mark_module_start();
SaveIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SaveIcon.svelte";
var root207 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path><polyline points="17 21 17 13 7 13 7 21"></polyline><polyline points="7 3 7 8 15 8"></polyline></svg>`), SaveIcon[FILENAME], [
  [
    14,
    0,
    [[14, 241], [14, 322], [14, 374]]
  ]
]);
function SaveIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SaveIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root207();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-save ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SaveIcon = hmr(SaveIcon, () => SaveIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SaveIcon[HMR].source;
    set(SaveIcon[HMR].source, module.default[HMR].original);
  });
}
var SaveIcon_default = SaveIcon;
mark_module_end(SaveIcon);

// node_modules/svelte-feather-icons/src/icons/ScissorsIcon.svelte
mark_module_start();
ScissorsIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ScissorsIcon.svelte";
var root208 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="6" cy="6" r="3"></circle><circle cx="6" cy="18" r="3"></circle><line x1="20" y1="4" x2="8.12" y2="15.88"></line><line x1="14.47" y1="14.48" x2="20" y2="20"></line><line x1="8.12" y1="8.12" x2="12" y2="12"></line></svg>`), ScissorsIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 245],
      [14, 282],
      [14, 320],
      [14, 369],
      [14, 420]
    ]
  ]
]);
function ScissorsIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ScissorsIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root208();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-scissors ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ScissorsIcon = hmr(ScissorsIcon, () => ScissorsIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ScissorsIcon[HMR].source;
    set(ScissorsIcon[HMR].source, module.default[HMR].original);
  });
}
var ScissorsIcon_default = ScissorsIcon;
mark_module_end(ScissorsIcon);

// node_modules/svelte-feather-icons/src/icons/SearchIcon.svelte
mark_module_start();
SearchIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SearchIcon.svelte";
var root209 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>`), SearchIcon[FILENAME], [
  [14, 0, [[14, 243], [14, 282]]]
]);
function SearchIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SearchIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root209();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-search ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SearchIcon = hmr(SearchIcon, () => SearchIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SearchIcon[HMR].source;
    set(SearchIcon[HMR].source, module.default[HMR].original);
  });
}
var SearchIcon_default = SearchIcon;
mark_module_end(SearchIcon);

// node_modules/svelte-feather-icons/src/icons/SendIcon.svelte
mark_module_start();
SendIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SendIcon.svelte";
var root210 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="22" y1="2" x2="11" y2="13"></line><polygon points="22 2 15 22 11 13 2 9 22 2"></polygon></svg>`), SendIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 285]]]
]);
function SendIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SendIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root210();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-send ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SendIcon = hmr(SendIcon, () => SendIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SendIcon[HMR].source;
    set(SendIcon[HMR].source, module.default[HMR].original);
  });
}
var SendIcon_default = SendIcon;
mark_module_end(SendIcon);

// node_modules/svelte-feather-icons/src/icons/ServerIcon.svelte
mark_module_start();
ServerIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ServerIcon.svelte";
var root211 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="2" width="20" height="8" rx="2" ry="2"></rect><rect x="2" y="14" width="20" height="8" rx="2" ry="2"></rect><line x1="6" y1="6" x2="6.01" y2="6"></line><line x1="6" y1="18" x2="6.01" y2="18"></line></svg>`), ServerIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 243],
      [14, 304],
      [14, 366],
      [14, 410]
    ]
  ]
]);
function ServerIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ServerIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root211();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-server ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ServerIcon = hmr(ServerIcon, () => ServerIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ServerIcon[HMR].source;
    set(ServerIcon[HMR].source, module.default[HMR].original);
  });
}
var ServerIcon_default = ServerIcon;
mark_module_end(ServerIcon);

// node_modules/svelte-feather-icons/src/icons/SettingsIcon.svelte
mark_module_start();
SettingsIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SettingsIcon.svelte";
var root212 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="3"></circle><path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z"></path></svg>`), SettingsIcon[FILENAME], [
  [14, 0, [[14, 245], [14, 284]]]
]);
function SettingsIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SettingsIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root212();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-settings ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SettingsIcon = hmr(SettingsIcon, () => SettingsIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SettingsIcon[HMR].source;
    set(SettingsIcon[HMR].source, module.default[HMR].original);
  });
}
var SettingsIcon_default = SettingsIcon;
mark_module_end(SettingsIcon);

// node_modules/svelte-feather-icons/src/icons/Share2Icon.svelte
mark_module_start();
Share2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Share2Icon.svelte";
var root213 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="18" cy="5" r="3"></circle><circle cx="6" cy="12" r="3"></circle><circle cx="18" cy="19" r="3"></circle><line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line><line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line></svg>`), Share2Icon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 282],
      [14, 320],
      [14, 359],
      [14, 415]
    ]
  ]
]);
function Share2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Share2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root213();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-share-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Share2Icon = hmr(Share2Icon, () => Share2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Share2Icon[HMR].source;
    set(Share2Icon[HMR].source, module.default[HMR].original);
  });
}
var Share2Icon_default = Share2Icon;
mark_module_end(Share2Icon);

// node_modules/svelte-feather-icons/src/icons/ShareIcon.svelte
mark_module_start();
ShareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ShareIcon.svelte";
var root214 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path><polyline points="16 6 12 2 8 6"></polyline><line x1="12" y1="2" x2="12" y2="15"></line></svg>`), ShareIcon[FILENAME], [
  [
    14,
    0,
    [[14, 242], [14, 301], [14, 345]]
  ]
]);
function ShareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ShareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root214();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-share ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShareIcon = hmr(ShareIcon, () => ShareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShareIcon[HMR].source;
    set(ShareIcon[HMR].source, module.default[HMR].original);
  });
}
var ShareIcon_default = ShareIcon;
mark_module_end(ShareIcon);

// node_modules/svelte-feather-icons/src/icons/ShieldOffIcon.svelte
mark_module_start();
ShieldOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ShieldOffIcon.svelte";
var root215 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M19.69 14a6.9 6.9 0 0 0 .31-2V5l-8-3-3.16 1.18"></path><path d="M4.73 4.73L4 5v7c0 6 8 10 8 10a20.29 20.29 0 0 0 5.62-4.38"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>`), ShieldOffIcon[FILENAME], [
  [
    14,
    0,
    [[14, 247], [14, 311], [14, 387]]
  ]
]);
function ShieldOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ShieldOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root215();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-shield-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldOffIcon = hmr(ShieldOffIcon, () => ShieldOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldOffIcon[HMR].source;
    set(ShieldOffIcon[HMR].source, module.default[HMR].original);
  });
}
var ShieldOffIcon_default = ShieldOffIcon;
mark_module_end(ShieldOffIcon);

// node_modules/svelte-feather-icons/src/icons/ShieldIcon.svelte
mark_module_start();
ShieldIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ShieldIcon.svelte";
var root216 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>`), ShieldIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function ShieldIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ShieldIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root216();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-shield ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShieldIcon = hmr(ShieldIcon, () => ShieldIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShieldIcon[HMR].source;
    set(ShieldIcon[HMR].source, module.default[HMR].original);
  });
}
var ShieldIcon_default = ShieldIcon;
mark_module_end(ShieldIcon);

// node_modules/svelte-feather-icons/src/icons/ShoppingBagIcon.svelte
mark_module_start();
ShoppingBagIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ShoppingBagIcon.svelte";
var root217 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M6 2L3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6l-3-4z"></path><line x1="3" y1="6" x2="21" y2="6"></line><path d="M16 10a4 4 0 0 1-8 0"></path></svg>`), ShoppingBagIcon[FILENAME], [
  [
    14,
    0,
    [[14, 249], [14, 317], [14, 359]]
  ]
]);
function ShoppingBagIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ShoppingBagIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root217();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-shopping-bag ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShoppingBagIcon = hmr(ShoppingBagIcon, () => ShoppingBagIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShoppingBagIcon[HMR].source;
    set(ShoppingBagIcon[HMR].source, module.default[HMR].original);
  });
}
var ShoppingBagIcon_default = ShoppingBagIcon;
mark_module_end(ShoppingBagIcon);

// node_modules/svelte-feather-icons/src/icons/ShoppingCartIcon.svelte
mark_module_start();
ShoppingCartIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ShoppingCartIcon.svelte";
var root218 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="9" cy="21" r="1"></circle><circle cx="20" cy="21" r="1"></circle><path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"></path></svg>`), ShoppingCartIcon[FILENAME], [
  [
    14,
    0,
    [[14, 250], [14, 288], [14, 327]]
  ]
]);
function ShoppingCartIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ShoppingCartIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root218();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-shopping-cart ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShoppingCartIcon = hmr(ShoppingCartIcon, () => ShoppingCartIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShoppingCartIcon[HMR].source;
    set(ShoppingCartIcon[HMR].source, module.default[HMR].original);
  });
}
var ShoppingCartIcon_default = ShoppingCartIcon;
mark_module_end(ShoppingCartIcon);

// node_modules/svelte-feather-icons/src/icons/ShuffleIcon.svelte
mark_module_start();
ShuffleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ShuffleIcon.svelte";
var root219 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 3 21 3 21 8"></polyline><line x1="4" y1="20" x2="21" y2="3"></line><polyline points="21 16 21 21 16 21"></polyline><line x1="15" y1="15" x2="21" y2="21"></line><line x1="4" y1="4" x2="9" y2="9"></line></svg>`), ShuffleIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 289],
      [14, 332],
      [14, 380],
      [14, 425]
    ]
  ]
]);
function ShuffleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ShuffleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root219();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-shuffle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ShuffleIcon = hmr(ShuffleIcon, () => ShuffleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ShuffleIcon[HMR].source;
    set(ShuffleIcon[HMR].source, module.default[HMR].original);
  });
}
var ShuffleIcon_default = ShuffleIcon;
mark_module_end(ShuffleIcon);

// node_modules/svelte-feather-icons/src/icons/SidebarIcon.svelte
mark_module_start();
SidebarIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SidebarIcon.svelte";
var root220 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="3" x2="9" y2="21"></line></svg>`), SidebarIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 306]]]
]);
function SidebarIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SidebarIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root220();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-sidebar ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SidebarIcon = hmr(SidebarIcon, () => SidebarIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarIcon[HMR].source;
    set(SidebarIcon[HMR].source, module.default[HMR].original);
  });
}
var SidebarIcon_default = SidebarIcon;
mark_module_end(SidebarIcon);

// node_modules/svelte-feather-icons/src/icons/SkipBackIcon.svelte
mark_module_start();
SkipBackIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SkipBackIcon.svelte";
var root221 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="19 20 9 12 19 4 19 20"></polygon><line x1="5" y1="19" x2="5" y2="5"></line></svg>`), SkipBackIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 296]]]
]);
function SkipBackIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SkipBackIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root221();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-skip-back ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipBackIcon = hmr(SkipBackIcon, () => SkipBackIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipBackIcon[HMR].source;
    set(SkipBackIcon[HMR].source, module.default[HMR].original);
  });
}
var SkipBackIcon_default = SkipBackIcon;
mark_module_end(SkipBackIcon);

// node_modules/svelte-feather-icons/src/icons/SkipForwardIcon.svelte
mark_module_start();
SkipForwardIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SkipForwardIcon.svelte";
var root222 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="5 4 15 12 5 20 5 4"></polygon><line x1="19" y1="5" x2="19" y2="19"></line></svg>`), SkipForwardIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 296]]]
]);
function SkipForwardIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SkipForwardIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root222();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-skip-forward ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SkipForwardIcon = hmr(SkipForwardIcon, () => SkipForwardIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SkipForwardIcon[HMR].source;
    set(SkipForwardIcon[HMR].source, module.default[HMR].original);
  });
}
var SkipForwardIcon_default = SkipForwardIcon;
mark_module_end(SkipForwardIcon);

// node_modules/svelte-feather-icons/src/icons/SlackIcon.svelte
mark_module_start();
SlackIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SlackIcon.svelte";
var root223 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M14.5 10c-.83 0-1.5-.67-1.5-1.5v-5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5z"></path><path d="M20.5 10H19V8.5c0-.83.67-1.5 1.5-1.5s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"></path><path d="M9.5 14c.83 0 1.5.67 1.5 1.5v5c0 .83-.67 1.5-1.5 1.5S8 21.33 8 20.5v-5c0-.83.67-1.5 1.5-1.5z"></path><path d="M3.5 14H5v1.5c0 .83-.67 1.5-1.5 1.5S2 16.33 2 15.5 2.67 14 3.5 14z"></path><path d="M14 14.5c0-.83.67-1.5 1.5-1.5h5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-5c-.83 0-1.5-.67-1.5-1.5z"></path><path d="M15.5 19H14v1.5c0 .83.67 1.5 1.5 1.5s1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z"></path><path d="M10 9.5C10 8.67 9.33 8 8.5 8h-5C2.67 8 2 8.67 2 9.5S2.67 11 3.5 11h5c.83 0 1.5-.67 1.5-1.5z"></path><path d="M8.5 5H10V3.5C10 2.67 9.33 2 8.5 2S7 2.67 7 3.5 7.67 5 8.5 5z"></path></svg>`), SlackIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 242],
      [14, 355],
      [14, 441],
      [14, 551],
      [14, 635],
      [14, 749],
      [14, 836],
      [14, 945]
    ]
  ]
]);
function SlackIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SlackIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root223();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-slack ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlackIcon = hmr(SlackIcon, () => SlackIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlackIcon[HMR].source;
    set(SlackIcon[HMR].source, module.default[HMR].original);
  });
}
var SlackIcon_default = SlackIcon;
mark_module_end(SlackIcon);

// node_modules/svelte-feather-icons/src/icons/SlashIcon.svelte
mark_module_start();
SlashIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SlashIcon.svelte";
var root224 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="4.93" y1="4.93" x2="19.07" y2="19.07"></line></svg>`), SlashIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 282]]]
]);
function SlashIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SlashIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root224();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-slash ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlashIcon = hmr(SlashIcon, () => SlashIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlashIcon[HMR].source;
    set(SlashIcon[HMR].source, module.default[HMR].original);
  });
}
var SlashIcon_default = SlashIcon;
mark_module_end(SlashIcon);

// node_modules/svelte-feather-icons/src/icons/SlidersIcon.svelte
mark_module_start();
SlidersIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SlidersIcon.svelte";
var root225 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="4" y1="21" x2="4" y2="14"></line><line x1="4" y1="10" x2="4" y2="3"></line><line x1="12" y1="21" x2="12" y2="12"></line><line x1="12" y1="8" x2="12" y2="3"></line><line x1="20" y1="21" x2="20" y2="16"></line><line x1="20" y1="12" x2="20" y2="3"></line><line x1="1" y1="14" x2="7" y2="14"></line><line x1="9" y1="8" x2="15" y2="8"></line><line x1="17" y1="16" x2="23" y2="16"></line></svg>`), SlidersIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 287],
      [14, 329],
      [14, 374],
      [14, 417],
      [14, 462],
      [14, 506],
      [14, 549],
      [14, 591]
    ]
  ]
]);
function SlidersIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SlidersIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root225();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-sliders ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SlidersIcon = hmr(SlidersIcon, () => SlidersIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SlidersIcon[HMR].source;
    set(SlidersIcon[HMR].source, module.default[HMR].original);
  });
}
var SlidersIcon_default = SlidersIcon;
mark_module_end(SlidersIcon);

// node_modules/svelte-feather-icons/src/icons/SmartphoneIcon.svelte
mark_module_start();
SmartphoneIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SmartphoneIcon.svelte";
var root226 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="5" y="2" width="14" height="20" rx="2" ry="2"></rect><line x1="12" y1="18" x2="12.01" y2="18"></line></svg>`), SmartphoneIcon[FILENAME], [
  [14, 0, [[14, 247], [14, 309]]]
]);
function SmartphoneIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SmartphoneIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root226();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-smartphone ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SmartphoneIcon = hmr(SmartphoneIcon, () => SmartphoneIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SmartphoneIcon[HMR].source;
    set(SmartphoneIcon[HMR].source, module.default[HMR].original);
  });
}
var SmartphoneIcon_default = SmartphoneIcon;
mark_module_end(SmartphoneIcon);

// node_modules/svelte-feather-icons/src/icons/SmileIcon.svelte
mark_module_start();
SmileIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SmileIcon.svelte";
var root227 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><path d="M8 14s1.5 2 4 2 4-2 4-2"></path><line x1="9" y1="9" x2="9.01" y2="9"></line><line x1="15" y1="9" x2="15.01" y2="9"></line></svg>`), SmileIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 242],
      [14, 282],
      [14, 323],
      [14, 367]
    ]
  ]
]);
function SmileIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SmileIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root227();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-smile ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SmileIcon = hmr(SmileIcon, () => SmileIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SmileIcon[HMR].source;
    set(SmileIcon[HMR].source, module.default[HMR].original);
  });
}
var SmileIcon_default = SmileIcon;
mark_module_end(SmileIcon);

// node_modules/svelte-feather-icons/src/icons/SpeakerIcon.svelte
mark_module_start();
SpeakerIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SpeakerIcon.svelte";
var root228 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="4" y="2" width="16" height="20" rx="2" ry="2"></rect><circle cx="12" cy="14" r="4"></circle><line x1="12" y1="6" x2="12.01" y2="6"></line></svg>`), SpeakerIcon[FILENAME], [
  [
    14,
    0,
    [[14, 244], [14, 306], [14, 345]]
  ]
]);
function SpeakerIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SpeakerIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root228();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-speaker ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SpeakerIcon = hmr(SpeakerIcon, () => SpeakerIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeakerIcon[HMR].source;
    set(SpeakerIcon[HMR].source, module.default[HMR].original);
  });
}
var SpeakerIcon_default = SpeakerIcon;
mark_module_end(SpeakerIcon);

// node_modules/svelte-feather-icons/src/icons/SquareIcon.svelte
mark_module_start();
SquareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SquareIcon.svelte";
var root229 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect></svg>`), SquareIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function SquareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SquareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root229();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-square ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SquareIcon = hmr(SquareIcon, () => SquareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SquareIcon[HMR].source;
    set(SquareIcon[HMR].source, module.default[HMR].original);
  });
}
var SquareIcon_default = SquareIcon;
mark_module_end(SquareIcon);

// node_modules/svelte-feather-icons/src/icons/StarIcon.svelte
mark_module_start();
StarIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/StarIcon.svelte";
var root230 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon></svg>`), StarIcon[FILENAME], [[14, 0, [[14, 241]]]]);
function StarIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, StarIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root230();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-star ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StarIcon = hmr(StarIcon, () => StarIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StarIcon[HMR].source;
    set(StarIcon[HMR].source, module.default[HMR].original);
  });
}
var StarIcon_default = StarIcon;
mark_module_end(StarIcon);

// node_modules/svelte-feather-icons/src/icons/StopCircleIcon.svelte
mark_module_start();
StopCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/StopCircleIcon.svelte";
var root231 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><rect x="9" y="9" width="6" height="6"></rect></svg>`), StopCircleIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 288]]]
]);
function StopCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, StopCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root231();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-stop-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  StopCircleIcon = hmr(StopCircleIcon, () => StopCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StopCircleIcon[HMR].source;
    set(StopCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var StopCircleIcon_default = StopCircleIcon;
mark_module_end(StopCircleIcon);

// node_modules/svelte-feather-icons/src/icons/SunIcon.svelte
mark_module_start();
SunIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SunIcon.svelte";
var root232 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>`), SunIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 240],
      [14, 279],
      [14, 322],
      [14, 367],
      [14, 420],
      [14, 477],
      [14, 520],
      [14, 565],
      [14, 620]
    ]
  ]
]);
function SunIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SunIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root232();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-sun ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SunIcon = hmr(SunIcon, () => SunIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SunIcon[HMR].source;
    set(SunIcon[HMR].source, module.default[HMR].original);
  });
}
var SunIcon_default = SunIcon;
mark_module_end(SunIcon);

// node_modules/svelte-feather-icons/src/icons/SunriseIcon.svelte
mark_module_start();
SunriseIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SunriseIcon.svelte";
var root233 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="2" x2="12" y2="9"></line><line x1="4.22" y1="10.22" x2="5.64" y2="11.64"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="11.64" x2="19.78" y2="10.22"></line><line x1="23" y1="22" x2="1" y2="22"></line><polyline points="8 6 12 2 16 6"></polyline></svg>`), SunriseIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 283],
      [14, 326],
      [14, 381],
      [14, 424],
      [14, 469],
      [14, 526],
      [14, 570]
    ]
  ]
]);
function SunriseIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SunriseIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root233();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-sunrise ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SunriseIcon = hmr(SunriseIcon, () => SunriseIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SunriseIcon[HMR].source;
    set(SunriseIcon[HMR].source, module.default[HMR].original);
  });
}
var SunriseIcon_default = SunriseIcon;
mark_module_end(SunriseIcon);

// node_modules/svelte-feather-icons/src/icons/SunsetIcon.svelte
mark_module_start();
SunsetIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/SunsetIcon.svelte";
var root234 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M17 18a5 5 0 0 0-10 0"></path><line x1="12" y1="9" x2="12" y2="2"></line><line x1="4.22" y1="10.22" x2="5.64" y2="11.64"></line><line x1="1" y1="18" x2="3" y2="18"></line><line x1="21" y1="18" x2="23" y2="18"></line><line x1="18.36" y1="11.64" x2="19.78" y2="10.22"></line><line x1="23" y1="22" x2="1" y2="22"></line><polyline points="16 5 12 9 8 5"></polyline></svg>`), SunsetIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 243],
      [14, 282],
      [14, 325],
      [14, 380],
      [14, 423],
      [14, 468],
      [14, 525],
      [14, 569]
    ]
  ]
]);
function SunsetIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, SunsetIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root234();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-sunset ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  SunsetIcon = hmr(SunsetIcon, () => SunsetIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SunsetIcon[HMR].source;
    set(SunsetIcon[HMR].source, module.default[HMR].original);
  });
}
var SunsetIcon_default = SunsetIcon;
mark_module_end(SunsetIcon);

// node_modules/svelte-feather-icons/src/icons/TableIcon.svelte
mark_module_start();
TableIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TableIcon.svelte";
var root235 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18"></path></svg>`), TableIcon[FILENAME], [[14, 0, [[14, 242]]]]);
function TableIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TableIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root235();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-table ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TableIcon = hmr(TableIcon, () => TableIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableIcon[HMR].source;
    set(TableIcon[HMR].source, module.default[HMR].original);
  });
}
var TableIcon_default = TableIcon;
mark_module_end(TableIcon);

// node_modules/svelte-feather-icons/src/icons/TabletIcon.svelte
mark_module_start();
TabletIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TabletIcon.svelte";
var root236 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="4" y="2" width="16" height="20" rx="2" ry="2"></rect><line x1="12" y1="18" x2="12.01" y2="18"></line></svg>`), TabletIcon[FILENAME], [
  [14, 0, [[14, 243], [14, 305]]]
]);
function TabletIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TabletIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root236();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-tablet ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TabletIcon = hmr(TabletIcon, () => TabletIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabletIcon[HMR].source;
    set(TabletIcon[HMR].source, module.default[HMR].original);
  });
}
var TabletIcon_default = TabletIcon;
mark_module_end(TabletIcon);

// node_modules/svelte-feather-icons/src/icons/TagIcon.svelte
mark_module_start();
TagIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TagIcon.svelte";
var root237 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path><line x1="7" y1="7" x2="7.01" y2="7"></line></svg>`), TagIcon[FILENAME], [
  [14, 0, [[14, 240], [14, 336]]]
]);
function TagIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TagIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root237();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-tag ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TagIcon = hmr(TagIcon, () => TagIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TagIcon[HMR].source;
    set(TagIcon[HMR].source, module.default[HMR].original);
  });
}
var TagIcon_default = TagIcon;
mark_module_end(TagIcon);

// node_modules/svelte-feather-icons/src/icons/TargetIcon.svelte
mark_module_start();
TargetIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TargetIcon.svelte";
var root238 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><circle cx="12" cy="12" r="6"></circle><circle cx="12" cy="12" r="2"></circle></svg>`), TargetIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 283], [14, 322]]
  ]
]);
function TargetIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TargetIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root238();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-target ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TargetIcon = hmr(TargetIcon, () => TargetIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TargetIcon[HMR].source;
    set(TargetIcon[HMR].source, module.default[HMR].original);
  });
}
var TargetIcon_default = TargetIcon;
mark_module_end(TargetIcon);

// node_modules/svelte-feather-icons/src/icons/TerminalIcon.svelte
mark_module_start();
TerminalIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TerminalIcon.svelte";
var root239 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="4 17 10 11 4 5"></polyline><line x1="12" y1="19" x2="20" y2="19"></line></svg>`), TerminalIcon[FILENAME], [
  [14, 0, [[14, 245], [14, 290]]]
]);
function TerminalIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TerminalIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root239();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-terminal ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TerminalIcon = hmr(TerminalIcon, () => TerminalIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TerminalIcon[HMR].source;
    set(TerminalIcon[HMR].source, module.default[HMR].original);
  });
}
var TerminalIcon_default = TerminalIcon;
mark_module_end(TerminalIcon);

// node_modules/svelte-feather-icons/src/icons/ThermometerIcon.svelte
mark_module_start();
ThermometerIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ThermometerIcon.svelte";
var root240 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M14 14.76V3.5a2.5 2.5 0 0 0-5 0v11.26a4.5 4.5 0 1 0 5 0z"></path></svg>`), ThermometerIcon[FILENAME], [[14, 0, [[14, 248]]]]);
function ThermometerIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ThermometerIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root240();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-thermometer ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThermometerIcon = hmr(ThermometerIcon, () => ThermometerIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThermometerIcon[HMR].source;
    set(ThermometerIcon[HMR].source, module.default[HMR].original);
  });
}
var ThermometerIcon_default = ThermometerIcon;
mark_module_end(ThermometerIcon);

// node_modules/svelte-feather-icons/src/icons/ThumbsDownIcon.svelte
mark_module_start();
ThumbsDownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ThumbsDownIcon.svelte";
var root241 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M10 15v4a3 3 0 0 0 3 3l4-9V2H5.72a2 2 0 0 0-2 1.7l-1.38 9a2 2 0 0 0 2 2.3zm7-13h2.67A2.31 2.31 0 0 1 22 4v7a2.31 2.31 0 0 1-2.33 2H17"></path></svg>`), ThumbsDownIcon[FILENAME], [[14, 0, [[14, 248]]]]);
function ThumbsDownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ThumbsDownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root241();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-thumbs-down ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThumbsDownIcon = hmr(ThumbsDownIcon, () => ThumbsDownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThumbsDownIcon[HMR].source;
    set(ThumbsDownIcon[HMR].source, module.default[HMR].original);
  });
}
var ThumbsDownIcon_default = ThumbsDownIcon;
mark_module_end(ThumbsDownIcon);

// node_modules/svelte-feather-icons/src/icons/ThumbsUpIcon.svelte
mark_module_start();
ThumbsUpIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ThumbsUpIcon.svelte";
var root242 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path></svg>`), ThumbsUpIcon[FILENAME], [[14, 0, [[14, 246]]]]);
function ThumbsUpIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ThumbsUpIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root242();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-thumbs-up ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ThumbsUpIcon = hmr(ThumbsUpIcon, () => ThumbsUpIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThumbsUpIcon[HMR].source;
    set(ThumbsUpIcon[HMR].source, module.default[HMR].original);
  });
}
var ThumbsUpIcon_default = ThumbsUpIcon;
mark_module_end(ThumbsUpIcon);

// node_modules/svelte-feather-icons/src/icons/ToggleLeftIcon.svelte
mark_module_start();
ToggleLeftIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ToggleLeftIcon.svelte";
var root243 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="5" width="22" height="14" rx="7" ry="7"></rect><circle cx="8" cy="12" r="3"></circle></svg>`), ToggleLeftIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 310]]]
]);
function ToggleLeftIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ToggleLeftIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root243();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-toggle-left ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ToggleLeftIcon = hmr(ToggleLeftIcon, () => ToggleLeftIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToggleLeftIcon[HMR].source;
    set(ToggleLeftIcon[HMR].source, module.default[HMR].original);
  });
}
var ToggleLeftIcon_default = ToggleLeftIcon;
mark_module_end(ToggleLeftIcon);

// node_modules/svelte-feather-icons/src/icons/ToggleRightIcon.svelte
mark_module_start();
ToggleRightIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ToggleRightIcon.svelte";
var root244 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="5" width="22" height="14" rx="7" ry="7"></rect><circle cx="16" cy="12" r="3"></circle></svg>`), ToggleRightIcon[FILENAME], [
  [14, 0, [[14, 249], [14, 311]]]
]);
function ToggleRightIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ToggleRightIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root244();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-toggle-right ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ToggleRightIcon = hmr(ToggleRightIcon, () => ToggleRightIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToggleRightIcon[HMR].source;
    set(ToggleRightIcon[HMR].source, module.default[HMR].original);
  });
}
var ToggleRightIcon_default = ToggleRightIcon;
mark_module_end(ToggleRightIcon);

// node_modules/svelte-feather-icons/src/icons/ToolIcon.svelte
mark_module_start();
ToolIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ToolIcon.svelte";
var root245 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"></path></svg>`), ToolIcon[FILENAME], [[14, 0, [[14, 241]]]]);
function ToolIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ToolIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root245();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-tool ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ToolIcon = hmr(ToolIcon, () => ToolIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToolIcon[HMR].source;
    set(ToolIcon[HMR].source, module.default[HMR].original);
  });
}
var ToolIcon_default = ToolIcon;
mark_module_end(ToolIcon);

// node_modules/svelte-feather-icons/src/icons/Trash2Icon.svelte
mark_module_start();
Trash2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Trash2Icon.svelte";
var root246 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>`), Trash2Icon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 287],
      [14, 383],
      [14, 428]
    ]
  ]
]);
function Trash2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Trash2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root246();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-trash-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash2Icon = hmr(Trash2Icon, () => Trash2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash2Icon[HMR].source;
    set(Trash2Icon[HMR].source, module.default[HMR].original);
  });
}
var Trash2Icon_default = Trash2Icon;
mark_module_end(Trash2Icon);

// node_modules/svelte-feather-icons/src/icons/TrashIcon.svelte
mark_module_start();
TrashIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TrashIcon.svelte";
var root247 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>`), TrashIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 285]]]
]);
function TrashIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TrashIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root247();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-trash ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrashIcon = hmr(TrashIcon, () => TrashIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrashIcon[HMR].source;
    set(TrashIcon[HMR].source, module.default[HMR].original);
  });
}
var TrashIcon_default = TrashIcon;
mark_module_end(TrashIcon);

// node_modules/svelte-feather-icons/src/icons/TrelloIcon.svelte
mark_module_start();
TrelloIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TrelloIcon.svelte";
var root248 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><rect x="7" y="7" width="3" height="9"></rect><rect x="14" y="7" width="3" height="5"></rect></svg>`), TrelloIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 305], [14, 351]]
  ]
]);
function TrelloIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TrelloIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root248();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-trello ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrelloIcon = hmr(TrelloIcon, () => TrelloIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrelloIcon[HMR].source;
    set(TrelloIcon[HMR].source, module.default[HMR].original);
  });
}
var TrelloIcon_default = TrelloIcon;
mark_module_end(TrelloIcon);

// node_modules/svelte-feather-icons/src/icons/TrendingDownIcon.svelte
mark_module_start();
TrendingDownIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TrendingDownIcon.svelte";
var root249 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="23 18 13.5 8.5 8.5 13.5 1 6"></polyline><polyline points="17 18 23 18 23 12"></polyline></svg>`), TrendingDownIcon[FILENAME], [
  [14, 0, [[14, 250], [14, 308]]]
]);
function TrendingDownIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TrendingDownIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root249();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-trending-down ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrendingDownIcon = hmr(TrendingDownIcon, () => TrendingDownIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrendingDownIcon[HMR].source;
    set(TrendingDownIcon[HMR].source, module.default[HMR].original);
  });
}
var TrendingDownIcon_default = TrendingDownIcon;
mark_module_end(TrendingDownIcon);

// node_modules/svelte-feather-icons/src/icons/TrendingUpIcon.svelte
mark_module_start();
TrendingUpIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TrendingUpIcon.svelte";
var root250 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline><polyline points="17 6 23 6 23 12"></polyline></svg>`), TrendingUpIcon[FILENAME], [
  [14, 0, [[14, 248], [14, 307]]]
]);
function TrendingUpIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TrendingUpIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root250();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-trending-up ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TrendingUpIcon = hmr(TrendingUpIcon, () => TrendingUpIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TrendingUpIcon[HMR].source;
    set(TrendingUpIcon[HMR].source, module.default[HMR].original);
  });
}
var TrendingUpIcon_default = TrendingUpIcon;
mark_module_end(TrendingUpIcon);

// node_modules/svelte-feather-icons/src/icons/TriangleIcon.svelte
mark_module_start();
TriangleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TriangleIcon.svelte";
var root251 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path></svg>`), TriangleIcon[FILENAME], [[14, 0, [[14, 245]]]]);
function TriangleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TriangleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root251();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-triangle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TriangleIcon = hmr(TriangleIcon, () => TriangleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TriangleIcon[HMR].source;
    set(TriangleIcon[HMR].source, module.default[HMR].original);
  });
}
var TriangleIcon_default = TriangleIcon;
mark_module_end(TriangleIcon);

// node_modules/svelte-feather-icons/src/icons/TruckIcon.svelte
mark_module_start();
TruckIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TruckIcon.svelte";
var root252 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="1" y="3" width="15" height="13"></rect><polygon points="16 8 20 8 23 11 23 16 16 16 16 8"></polygon><circle cx="5.5" cy="18.5" r="2.5"></circle><circle cx="18.5" cy="18.5" r="2.5"></circle></svg>`), TruckIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 242],
      [14, 290],
      [14, 351],
      [14, 395]
    ]
  ]
]);
function TruckIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TruckIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root252();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-truck ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TruckIcon = hmr(TruckIcon, () => TruckIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TruckIcon[HMR].source;
    set(TruckIcon[HMR].source, module.default[HMR].original);
  });
}
var TruckIcon_default = TruckIcon;
mark_module_end(TruckIcon);

// node_modules/svelte-feather-icons/src/icons/TvIcon.svelte
mark_module_start();
TvIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TvIcon.svelte";
var root253 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="7" width="20" height="15" rx="2" ry="2"></rect><polyline points="17 2 12 7 7 2"></polyline></svg>`), TvIcon[FILENAME], [
  [14, 0, [[14, 239], [14, 301]]]
]);
function TvIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TvIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root253();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-tv ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TvIcon = hmr(TvIcon, () => TvIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TvIcon[HMR].source;
    set(TvIcon[HMR].source, module.default[HMR].original);
  });
}
var TvIcon_default = TvIcon;
mark_module_end(TvIcon);

// node_modules/svelte-feather-icons/src/icons/TwitchIcon.svelte
mark_module_start();
TwitchIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TwitchIcon.svelte";
var root254 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7"></path></svg>`), TwitchIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function TwitchIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TwitchIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root254();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-twitch ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TwitchIcon = hmr(TwitchIcon, () => TwitchIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TwitchIcon[HMR].source;
    set(TwitchIcon[HMR].source, module.default[HMR].original);
  });
}
var TwitchIcon_default = TwitchIcon;
mark_module_end(TwitchIcon);

// node_modules/svelte-feather-icons/src/icons/TwitterIcon.svelte
mark_module_start();
TwitterIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TwitterIcon.svelte";
var root255 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M23 3a10.9 10.9 0 0 1-3.14 1.53 4.48 4.48 0 0 0-7.86 3v1A10.66 10.66 0 0 1 3 4s-4 9 5 13a11.64 11.64 0 0 1-7 2c9 5 20 0 20-11.5a4.5 4.5 0 0 0-.08-.83A7.72 7.72 0 0 0 23 3z"></path></svg>`), TwitterIcon[FILENAME], [[14, 0, [[14, 244]]]]);
function TwitterIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TwitterIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root255();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-twitter ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TwitterIcon = hmr(TwitterIcon, () => TwitterIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TwitterIcon[HMR].source;
    set(TwitterIcon[HMR].source, module.default[HMR].original);
  });
}
var TwitterIcon_default = TwitterIcon;
mark_module_end(TwitterIcon);

// node_modules/svelte-feather-icons/src/icons/TypeIcon.svelte
mark_module_start();
TypeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/TypeIcon.svelte";
var root256 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="4 7 4 4 20 4 20 7"></polyline><line x1="9" y1="20" x2="15" y2="20"></line><line x1="12" y1="4" x2="12" y2="20"></line></svg>`), TypeIcon[FILENAME], [
  [
    14,
    0,
    [[14, 241], [14, 289], [14, 333]]
  ]
]);
function TypeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, TypeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root256();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-type ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  TypeIcon = hmr(TypeIcon, () => TypeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TypeIcon[HMR].source;
    set(TypeIcon[HMR].source, module.default[HMR].original);
  });
}
var TypeIcon_default = TypeIcon;
mark_module_end(TypeIcon);

// node_modules/svelte-feather-icons/src/icons/UmbrellaIcon.svelte
mark_module_start();
UmbrellaIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UmbrellaIcon.svelte";
var root257 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M23 12a11.05 11.05 0 0 0-22 0zm-5 7a3 3 0 0 1-6 0v-7"></path></svg>`), UmbrellaIcon[FILENAME], [[14, 0, [[14, 245]]]]);
function UmbrellaIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UmbrellaIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root257();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-umbrella ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UmbrellaIcon = hmr(UmbrellaIcon, () => UmbrellaIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UmbrellaIcon[HMR].source;
    set(UmbrellaIcon[HMR].source, module.default[HMR].original);
  });
}
var UmbrellaIcon_default = UmbrellaIcon;
mark_module_end(UmbrellaIcon);

// node_modules/svelte-feather-icons/src/icons/UnderlineIcon.svelte
mark_module_start();
UnderlineIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UnderlineIcon.svelte";
var root258 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"></path><line x1="4" y1="21" x2="20" y2="21"></line></svg>`), UnderlineIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 300]]]
]);
function UnderlineIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UnderlineIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root258();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-underline ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UnderlineIcon = hmr(UnderlineIcon, () => UnderlineIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UnderlineIcon[HMR].source;
    set(UnderlineIcon[HMR].source, module.default[HMR].original);
  });
}
var UnderlineIcon_default = UnderlineIcon;
mark_module_end(UnderlineIcon);

// node_modules/svelte-feather-icons/src/icons/UnlockIcon.svelte
mark_module_start();
UnlockIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UnlockIcon.svelte";
var root259 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 9.9-1"></path></svg>`), UnlockIcon[FILENAME], [
  [14, 0, [[14, 243], [14, 306]]]
]);
function UnlockIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UnlockIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root259();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-unlock ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UnlockIcon = hmr(UnlockIcon, () => UnlockIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UnlockIcon[HMR].source;
    set(UnlockIcon[HMR].source, module.default[HMR].original);
  });
}
var UnlockIcon_default = UnlockIcon;
mark_module_end(UnlockIcon);

// node_modules/svelte-feather-icons/src/icons/UploadCloudIcon.svelte
mark_module_start();
UploadCloudIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UploadCloudIcon.svelte";
var root260 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="16 16 12 12 8 16"></polyline><line x1="12" y1="12" x2="12" y2="21"></line><path d="M20.39 18.39A5 5 0 0 0 18 9h-1.26A8 8 0 1 0 3 16.3"></path><polyline points="16 16 12 12 8 16"></polyline></svg>`), UploadCloudIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 249],
      [14, 296],
      [14, 341],
      [14, 409]
    ]
  ]
]);
function UploadCloudIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UploadCloudIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root260();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-upload-cloud ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UploadCloudIcon = hmr(UploadCloudIcon, () => UploadCloudIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UploadCloudIcon[HMR].source;
    set(UploadCloudIcon[HMR].source, module.default[HMR].original);
  });
}
var UploadCloudIcon_default = UploadCloudIcon;
mark_module_end(UploadCloudIcon);

// node_modules/svelte-feather-icons/src/icons/UploadIcon.svelte
mark_module_start();
UploadIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UploadIcon.svelte";
var root261 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="17 8 12 3 7 8"></polyline><line x1="12" y1="3" x2="12" y2="15"></line></svg>`), UploadIcon[FILENAME], [
  [
    14,
    0,
    [[14, 243], [14, 302], [14, 346]]
  ]
]);
function UploadIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UploadIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root261();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-upload ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UploadIcon = hmr(UploadIcon, () => UploadIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UploadIcon[HMR].source;
    set(UploadIcon[HMR].source, module.default[HMR].original);
  });
}
var UploadIcon_default = UploadIcon;
mark_module_end(UploadIcon);

// node_modules/svelte-feather-icons/src/icons/UserCheckIcon.svelte
mark_module_start();
UserCheckIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UserCheckIcon.svelte";
var root262 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><polyline points="17 11 19 13 23 9"></polyline></svg>`), UserCheckIcon[FILENAME], [
  [
    14,
    0,
    [[14, 247], [14, 306], [14, 345]]
  ]
]);
function UserCheckIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UserCheckIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root262();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-user-check ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UserCheckIcon = hmr(UserCheckIcon, () => UserCheckIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UserCheckIcon[HMR].source;
    set(UserCheckIcon[HMR].source, module.default[HMR].original);
  });
}
var UserCheckIcon_default = UserCheckIcon;
mark_module_end(UserCheckIcon);

// node_modules/svelte-feather-icons/src/icons/UserMinusIcon.svelte
mark_module_start();
UserMinusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UserMinusIcon.svelte";
var root263 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="23" y1="11" x2="17" y2="11"></line></svg>`), UserMinusIcon[FILENAME], [
  [
    14,
    0,
    [[14, 247], [14, 306], [14, 345]]
  ]
]);
function UserMinusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UserMinusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root263();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-user-minus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UserMinusIcon = hmr(UserMinusIcon, () => UserMinusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UserMinusIcon[HMR].source;
    set(UserMinusIcon[HMR].source, module.default[HMR].original);
  });
}
var UserMinusIcon_default = UserMinusIcon;
mark_module_end(UserMinusIcon);

// node_modules/svelte-feather-icons/src/icons/UserPlusIcon.svelte
mark_module_start();
UserPlusIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UserPlusIcon.svelte";
var root264 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="20" y1="8" x2="20" y2="14"></line><line x1="23" y1="11" x2="17" y2="11"></line></svg>`), UserPlusIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 246],
      [14, 305],
      [14, 344],
      [14, 388]
    ]
  ]
]);
function UserPlusIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UserPlusIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root264();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-user-plus ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UserPlusIcon = hmr(UserPlusIcon, () => UserPlusIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UserPlusIcon[HMR].source;
    set(UserPlusIcon[HMR].source, module.default[HMR].original);
  });
}
var UserPlusIcon_default = UserPlusIcon;
mark_module_end(UserPlusIcon);

// node_modules/svelte-feather-icons/src/icons/UserXIcon.svelte
mark_module_start();
UserXIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UserXIcon.svelte";
var root265 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="8.5" cy="7" r="4"></circle><line x1="18" y1="8" x2="23" y2="13"></line><line x1="23" y1="8" x2="18" y2="13"></line></svg>`), UserXIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 243],
      [14, 302],
      [14, 341],
      [14, 385]
    ]
  ]
]);
function UserXIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UserXIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root265();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-user-x ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UserXIcon = hmr(UserXIcon, () => UserXIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UserXIcon[HMR].source;
    set(UserXIcon[HMR].source, module.default[HMR].original);
  });
}
var UserXIcon_default = UserXIcon;
mark_module_end(UserXIcon);

// node_modules/svelte-feather-icons/src/icons/UserIcon.svelte
mark_module_start();
UserIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UserIcon.svelte";
var root266 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>`), UserIcon[FILENAME], [
  [14, 0, [[14, 241], [14, 300]]]
]);
function UserIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UserIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root266();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-user ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UserIcon = hmr(UserIcon, () => UserIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UserIcon[HMR].source;
    set(UserIcon[HMR].source, module.default[HMR].original);
  });
}
var UserIcon_default = UserIcon;
mark_module_end(UserIcon);

// node_modules/svelte-feather-icons/src/icons/UsersIcon.svelte
mark_module_start();
UsersIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/UsersIcon.svelte";
var root267 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M23 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>`), UsersIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 242],
      [14, 301],
      [14, 338],
      [14, 382]
    ]
  ]
]);
function UsersIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, UsersIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root267();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-users ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  UsersIcon = hmr(UsersIcon, () => UsersIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = UsersIcon[HMR].source;
    set(UsersIcon[HMR].source, module.default[HMR].original);
  });
}
var UsersIcon_default = UsersIcon;
mark_module_end(UsersIcon);

// node_modules/svelte-feather-icons/src/icons/VideoOffIcon.svelte
mark_module_start();
VideoOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/VideoOffIcon.svelte";
var root268 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>`), VideoOffIcon[FILENAME], [
  [14, 0, [[14, 246], [14, 361]]]
]);
function VideoOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, VideoOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root268();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-video-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VideoOffIcon = hmr(VideoOffIcon, () => VideoOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VideoOffIcon[HMR].source;
    set(VideoOffIcon[HMR].source, module.default[HMR].original);
  });
}
var VideoOffIcon_default = VideoOffIcon;
mark_module_end(VideoOffIcon);

// node_modules/svelte-feather-icons/src/icons/VideoIcon.svelte
mark_module_start();
VideoIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/VideoIcon.svelte";
var root269 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="23 7 16 12 23 17 23 7"></polygon><rect x="1" y="5" width="15" height="14" rx="2" ry="2"></rect></svg>`), VideoIcon[FILENAME], [
  [14, 0, [[14, 242], [14, 292]]]
]);
function VideoIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, VideoIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root269();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-video ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VideoIcon = hmr(VideoIcon, () => VideoIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VideoIcon[HMR].source;
    set(VideoIcon[HMR].source, module.default[HMR].original);
  });
}
var VideoIcon_default = VideoIcon;
mark_module_end(VideoIcon);

// node_modules/svelte-feather-icons/src/icons/VoicemailIcon.svelte
mark_module_start();
VoicemailIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/VoicemailIcon.svelte";
var root270 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="5.5" cy="11.5" r="4.5"></circle><circle cx="18.5" cy="11.5" r="4.5"></circle><line x1="5.5" y1="16" x2="18.5" y2="16"></line></svg>`), VoicemailIcon[FILENAME], [
  [
    14,
    0,
    [[14, 246], [14, 290], [14, 335]]
  ]
]);
function VoicemailIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, VoicemailIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root270();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-voicemail ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VoicemailIcon = hmr(VoicemailIcon, () => VoicemailIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VoicemailIcon[HMR].source;
    set(VoicemailIcon[HMR].source, module.default[HMR].original);
  });
}
var VoicemailIcon_default = VoicemailIcon;
mark_module_end(VoicemailIcon);

// node_modules/svelte-feather-icons/src/icons/Volume1Icon.svelte
mark_module_start();
Volume1Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Volume1Icon.svelte";
var root271 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M15.54 8.46a5 5 0 0 1 0 7.07"></path></svg>`), Volume1Icon[FILENAME], [
  [14, 0, [[14, 245], [14, 307]]]
]);
function Volume1Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Volume1Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root271();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-volume-1 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volume1Icon = hmr(Volume1Icon, () => Volume1Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volume1Icon[HMR].source;
    set(Volume1Icon[HMR].source, module.default[HMR].original);
  });
}
var Volume1Icon_default = Volume1Icon;
mark_module_end(Volume1Icon);

// node_modules/svelte-feather-icons/src/icons/Volume2Icon.svelte
mark_module_start();
Volume2Icon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/Volume2Icon.svelte";
var root272 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><path d="M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07"></path></svg>`), Volume2Icon[FILENAME], [
  [14, 0, [[14, 245], [14, 307]]]
]);
function Volume2Icon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Volume2Icon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root272();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-volume-2 ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volume2Icon = hmr(Volume2Icon, () => Volume2Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volume2Icon[HMR].source;
    set(Volume2Icon[HMR].source, module.default[HMR].original);
  });
}
var Volume2Icon_default = Volume2Icon;
mark_module_end(Volume2Icon);

// node_modules/svelte-feather-icons/src/icons/VolumeXIcon.svelte
mark_module_start();
VolumeXIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/VolumeXIcon.svelte";
var root273 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon><line x1="23" y1="9" x2="17" y2="15"></line><line x1="17" y1="9" x2="23" y2="15"></line></svg>`), VolumeXIcon[FILENAME], [
  [
    14,
    0,
    [[14, 245], [14, 307], [14, 351]]
  ]
]);
function VolumeXIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, VolumeXIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root273();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-volume-x ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeXIcon = hmr(VolumeXIcon, () => VolumeXIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeXIcon[HMR].source;
    set(VolumeXIcon[HMR].source, module.default[HMR].original);
  });
}
var VolumeXIcon_default = VolumeXIcon;
mark_module_end(VolumeXIcon);

// node_modules/svelte-feather-icons/src/icons/VolumeIcon.svelte
mark_module_start();
VolumeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/VolumeIcon.svelte";
var root274 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"></polygon></svg>`), VolumeIcon[FILENAME], [[14, 0, [[14, 243]]]]);
function VolumeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, VolumeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root274();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-volume ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  VolumeIcon = hmr(VolumeIcon, () => VolumeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VolumeIcon[HMR].source;
    set(VolumeIcon[HMR].source, module.default[HMR].original);
  });
}
var VolumeIcon_default = VolumeIcon;
mark_module_end(VolumeIcon);

// node_modules/svelte-feather-icons/src/icons/WatchIcon.svelte
mark_module_start();
WatchIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/WatchIcon.svelte";
var root275 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="7"></circle><polyline points="12 9 12 12 13.5 13.5"></polyline><path d="M16.51 17.35l-.35 3.83a2 2 0 0 1-2 1.82H9.83a2 2 0 0 1-2-1.82l-.35-3.83m.01-10.7l.35-3.83A2 2 0 0 1 9.83 1h4.35a2 2 0 0 1 2 1.82l.35 3.83"></path></svg>`), WatchIcon[FILENAME], [
  [
    14,
    0,
    [[14, 242], [14, 281], [14, 332]]
  ]
]);
function WatchIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, WatchIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root275();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-watch ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WatchIcon = hmr(WatchIcon, () => WatchIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WatchIcon[HMR].source;
    set(WatchIcon[HMR].source, module.default[HMR].original);
  });
}
var WatchIcon_default = WatchIcon;
mark_module_end(WatchIcon);

// node_modules/svelte-feather-icons/src/icons/WifiOffIcon.svelte
mark_module_start();
WifiOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/WifiOffIcon.svelte";
var root276 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="1" y1="1" x2="23" y2="23"></line><path d="M16.72 11.06A10.94 10.94 0 0 1 19 12.55"></path><path d="M5 12.55a10.94 10.94 0 0 1 5.17-2.39"></path><path d="M10.71 5.05A16 16 0 0 1 22.58 9"></path><path d="M1.42 9a15.91 15.91 0 0 1 4.7-2.88"></path><path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path><line x1="12" y1="20" x2="12.01" y2="20"></line></svg>`), WifiOffIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 245],
      [14, 288],
      [14, 345],
      [14, 399],
      [14, 448],
      [14, 500],
      [14, 546]
    ]
  ]
]);
function WifiOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, WifiOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root276();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-wifi-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WifiOffIcon = hmr(WifiOffIcon, () => WifiOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WifiOffIcon[HMR].source;
    set(WifiOffIcon[HMR].source, module.default[HMR].original);
  });
}
var WifiOffIcon_default = WifiOffIcon;
mark_module_end(WifiOffIcon);

// node_modules/svelte-feather-icons/src/icons/WifiIcon.svelte
mark_module_start();
WifiIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/WifiIcon.svelte";
var root277 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12.55a11 11 0 0 1 14.08 0"></path><path d="M1.42 9a16 16 0 0 1 21.16 0"></path><path d="M8.53 16.11a6 6 0 0 1 6.95 0"></path><line x1="12" y1="20" x2="12.01" y2="20"></line></svg>`), WifiIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 241],
      [14, 287],
      [14, 332],
      [14, 378]
    ]
  ]
]);
function WifiIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, WifiIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root277();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-wifi ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WifiIcon = hmr(WifiIcon, () => WifiIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WifiIcon[HMR].source;
    set(WifiIcon[HMR].source, module.default[HMR].original);
  });
}
var WifiIcon_default = WifiIcon;
mark_module_end(WifiIcon);

// node_modules/svelte-feather-icons/src/icons/WindIcon.svelte
mark_module_start();
WindIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/WindIcon.svelte";
var root278 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M9.59 4.59A2 2 0 1 1 11 8H2m10.59 11.41A2 2 0 1 0 14 16H2m15.73-8.27A2.5 2.5 0 1 1 19.5 12H2"></path></svg>`), WindIcon[FILENAME], [[14, 0, [[14, 241]]]]);
function WindIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, WindIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root278();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-wind ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  WindIcon = hmr(WindIcon, () => WindIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WindIcon[HMR].source;
    set(WindIcon[HMR].source, module.default[HMR].original);
  });
}
var WindIcon_default = WindIcon;
mark_module_end(WindIcon);

// node_modules/svelte-feather-icons/src/icons/XCircleIcon.svelte
mark_module_start();
XCircleIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/XCircleIcon.svelte";
var root279 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>`), XCircleIcon[FILENAME], [
  [
    14,
    0,
    [[14, 245], [14, 285], [14, 328]]
  ]
]);
function XCircleIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, XCircleIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root279();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-x-circle ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XCircleIcon = hmr(XCircleIcon, () => XCircleIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XCircleIcon[HMR].source;
    set(XCircleIcon[HMR].source, module.default[HMR].original);
  });
}
var XCircleIcon_default = XCircleIcon;
mark_module_end(XCircleIcon);

// node_modules/svelte-feather-icons/src/icons/XOctagonIcon.svelte
mark_module_start();
XOctagonIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/XOctagonIcon.svelte";
var root280 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="7.86 2 16.14 2 22 7.86 22 16.14 16.14 22 7.86 22 2 16.14 2 7.86 7.86 2"></polygon><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line></svg>`), XOctagonIcon[FILENAME], [
  [
    14,
    0,
    [[14, 246], [14, 345], [14, 388]]
  ]
]);
function XOctagonIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, XOctagonIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root280();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-x-octagon ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XOctagonIcon = hmr(XOctagonIcon, () => XOctagonIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XOctagonIcon[HMR].source;
    set(XOctagonIcon[HMR].source, module.default[HMR].original);
  });
}
var XOctagonIcon_default = XOctagonIcon;
mark_module_end(XOctagonIcon);

// node_modules/svelte-feather-icons/src/icons/XSquareIcon.svelte
mark_module_start();
XSquareIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/XSquareIcon.svelte";
var root281 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="9" x2="15" y2="15"></line><line x1="15" y1="9" x2="9" y2="15"></line></svg>`), XSquareIcon[FILENAME], [
  [
    14,
    0,
    [[14, 245], [14, 307], [14, 350]]
  ]
]);
function XSquareIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, XSquareIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root281();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-x-square ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XSquareIcon = hmr(XSquareIcon, () => XSquareIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XSquareIcon[HMR].source;
    set(XSquareIcon[HMR].source, module.default[HMR].original);
  });
}
var XSquareIcon_default = XSquareIcon;
mark_module_end(XSquareIcon);

// node_modules/svelte-feather-icons/src/icons/XIcon.svelte
mark_module_start();
XIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/XIcon.svelte";
var root282 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>`), XIcon[FILENAME], [
  [14, 0, [[14, 238], [14, 281]]]
]);
function XIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, XIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root282();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-x ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  XIcon = hmr(XIcon, () => XIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = XIcon[HMR].source;
    set(XIcon[HMR].source, module.default[HMR].original);
  });
}
var XIcon_default = XIcon;
mark_module_end(XIcon);

// node_modules/svelte-feather-icons/src/icons/YoutubeIcon.svelte
mark_module_start();
YoutubeIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/YoutubeIcon.svelte";
var root283 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"></path><polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"></polygon></svg>`), YoutubeIcon[FILENAME], [
  [14, 0, [[14, 244], [14, 519]]]
]);
function YoutubeIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, YoutubeIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root283();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-youtube ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  YoutubeIcon = hmr(YoutubeIcon, () => YoutubeIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = YoutubeIcon[HMR].source;
    set(YoutubeIcon[HMR].source, module.default[HMR].original);
  });
}
var YoutubeIcon_default = YoutubeIcon;
mark_module_end(YoutubeIcon);

// node_modules/svelte-feather-icons/src/icons/ZapOffIcon.svelte
mark_module_start();
ZapOffIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ZapOffIcon.svelte";
var root284 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polyline points="12.41 6.75 13 2 10.57 4.92"></polyline><polyline points="18.57 12.91 21 10 15.66 10"></polyline><polyline points="8 8 3 14 12 14 11 22 16 16"></polyline><line x1="1" y1="1" x2="23" y2="23"></line></svg>`), ZapOffIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 301],
      [14, 358],
      [14, 415]
    ]
  ]
]);
function ZapOffIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ZapOffIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root284();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-zap-off ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ZapOffIcon = hmr(ZapOffIcon, () => ZapOffIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ZapOffIcon[HMR].source;
    set(ZapOffIcon[HMR].source, module.default[HMR].original);
  });
}
var ZapOffIcon_default = ZapOffIcon;
mark_module_end(ZapOffIcon);

// node_modules/svelte-feather-icons/src/icons/ZapIcon.svelte
mark_module_start();
ZapIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ZapIcon.svelte";
var root285 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><polygon points="13 2 3 14 12 14 11 22 21 10 12 10 13 2"></polygon></svg>`), ZapIcon[FILENAME], [[14, 0, [[14, 240]]]]);
function ZapIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ZapIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root285();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-zap ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ZapIcon = hmr(ZapIcon, () => ZapIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ZapIcon[HMR].source;
    set(ZapIcon[HMR].source, module.default[HMR].original);
  });
}
var ZapIcon_default = ZapIcon;
mark_module_end(ZapIcon);

// node_modules/svelte-feather-icons/src/icons/ZoomInIcon.svelte
mark_module_start();
ZoomInIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ZoomInIcon.svelte";
var root286 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="11" y1="8" x2="11" y2="14"></line><line x1="8" y1="11" x2="14" y2="11"></line></svg>`), ZoomInIcon[FILENAME], [
  [
    14,
    0,
    [
      [14, 244],
      [14, 283],
      [14, 334],
      [14, 378]
    ]
  ]
]);
function ZoomInIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ZoomInIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root286();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-zoom-in ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ZoomInIcon = hmr(ZoomInIcon, () => ZoomInIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ZoomInIcon[HMR].source;
    set(ZoomInIcon[HMR].source, module.default[HMR].original);
  });
}
var ZoomInIcon_default = ZoomInIcon;
mark_module_end(ZoomInIcon);

// node_modules/svelte-feather-icons/src/icons/ZoomOutIcon.svelte
mark_module_start();
ZoomOutIcon[FILENAME] = "node_modules/svelte-feather-icons/src/icons/ZoomOutIcon.svelte";
var root287 = add_locations(ns_template(`<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line><line x1="8" y1="11" x2="14" y2="11"></line></svg>`), ZoomOutIcon[FILENAME], [
  [
    14,
    0,
    [[14, 245], [14, 284], [14, 335]]
  ]
]);
function ZoomOutIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ZoomOutIcon);
  let size = prop($$props, "size", 12, "24");
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let customClass = prop($$props, "class", 8, "");
  if (strict_equals(size(), "100%", false)) {
    size(strict_equals(size().slice(-1), "x") ? size().slice(0, size().length - 1) + "em" : parseInt(size()) + "px");
  }
  init();
  var svg = root287();
  template_effect(() => {
    set_attribute(svg, "width", size());
    set_attribute(svg, "height", size());
    set_attribute(svg, "stroke-width", strokeWidth());
    set_class(svg, 0, `feather feather-zoom-out ${customClass() ?? ""}`);
  });
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ZoomOutIcon = hmr(ZoomOutIcon, () => ZoomOutIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ZoomOutIcon[HMR].source;
    set(ZoomOutIcon[HMR].source, module.default[HMR].original);
  });
}
var ZoomOutIcon_default = ZoomOutIcon;
mark_module_end(ZoomOutIcon);
export {
  ActivityIcon_default as ActivityIcon,
  AirplayIcon_default as AirplayIcon,
  AlertCircleIcon_default as AlertCircleIcon,
  AlertOctagonIcon_default as AlertOctagonIcon,
  AlertTriangleIcon_default as AlertTriangleIcon,
  AlignCenterIcon_default as AlignCenterIcon,
  AlignJustifyIcon_default as AlignJustifyIcon,
  AlignLeftIcon_default as AlignLeftIcon,
  AlignRightIcon_default as AlignRightIcon,
  AnchorIcon_default as AnchorIcon,
  ApertureIcon_default as ApertureIcon,
  ArchiveIcon_default as ArchiveIcon,
  ArrowDownCircleIcon_default as ArrowDownCircleIcon,
  ArrowDownIcon_default as ArrowDownIcon,
  ArrowDownLeftIcon_default as ArrowDownLeftIcon,
  ArrowDownRightIcon_default as ArrowDownRightIcon,
  ArrowLeftCircleIcon_default as ArrowLeftCircleIcon,
  ArrowLeftIcon_default as ArrowLeftIcon,
  ArrowRightCircleIcon_default as ArrowRightCircleIcon,
  ArrowRightIcon_default as ArrowRightIcon,
  ArrowUpCircleIcon_default as ArrowUpCircleIcon,
  ArrowUpIcon_default as ArrowUpIcon,
  ArrowUpLeftIcon_default as ArrowUpLeftIcon,
  ArrowUpRightIcon_default as ArrowUpRightIcon,
  AtSignIcon_default as AtSignIcon,
  AwardIcon_default as AwardIcon,
  BarChart2Icon_default as BarChart2Icon,
  BarChartIcon_default as BarChartIcon,
  BatteryChargingIcon_default as BatteryChargingIcon,
  BatteryIcon_default as BatteryIcon,
  BellIcon_default as BellIcon,
  BellOffIcon_default as BellOffIcon,
  BluetoothIcon_default as BluetoothIcon,
  BoldIcon_default as BoldIcon,
  BookIcon_default as BookIcon,
  BookOpenIcon_default as BookOpenIcon,
  BookmarkIcon_default as BookmarkIcon,
  BoxIcon_default as BoxIcon,
  BriefcaseIcon_default as BriefcaseIcon,
  CalendarIcon_default as CalendarIcon,
  CameraIcon_default as CameraIcon,
  CameraOffIcon_default as CameraOffIcon,
  CastIcon_default as CastIcon,
  CheckCircleIcon_default as CheckCircleIcon,
  CheckIcon_default as CheckIcon,
  CheckSquareIcon_default as CheckSquareIcon,
  ChevronDownIcon_default as ChevronDownIcon,
  ChevronLeftIcon_default as ChevronLeftIcon,
  ChevronRightIcon_default as ChevronRightIcon,
  ChevronUpIcon_default as ChevronUpIcon,
  ChevronsDownIcon_default as ChevronsDownIcon,
  ChevronsLeftIcon_default as ChevronsLeftIcon,
  ChevronsRightIcon_default as ChevronsRightIcon,
  ChevronsUpIcon_default as ChevronsUpIcon,
  ChromeIcon_default as ChromeIcon,
  CircleIcon_default as CircleIcon,
  ClipboardIcon_default as ClipboardIcon,
  ClockIcon_default as ClockIcon,
  CloudDrizzleIcon_default as CloudDrizzleIcon,
  CloudIcon_default as CloudIcon,
  CloudLightningIcon_default as CloudLightningIcon,
  CloudOffIcon_default as CloudOffIcon,
  CloudRainIcon_default as CloudRainIcon,
  CloudSnowIcon_default as CloudSnowIcon,
  CodeIcon_default as CodeIcon,
  CodepenIcon_default as CodepenIcon,
  CodesandboxIcon_default as CodesandboxIcon,
  CoffeeIcon_default as CoffeeIcon,
  ColumnsIcon_default as ColumnsIcon,
  CommandIcon_default as CommandIcon,
  CompassIcon_default as CompassIcon,
  CopyIcon_default as CopyIcon,
  CornerDownLeftIcon_default as CornerDownLeftIcon,
  CornerDownRightIcon_default as CornerDownRightIcon,
  CornerLeftDownIcon_default as CornerLeftDownIcon,
  CornerLeftUpIcon_default as CornerLeftUpIcon,
  CornerRightDownIcon_default as CornerRightDownIcon,
  CornerRightUpIcon_default as CornerRightUpIcon,
  CornerUpLeftIcon_default as CornerUpLeftIcon,
  CornerUpRightIcon_default as CornerUpRightIcon,
  CpuIcon_default as CpuIcon,
  CreditCardIcon_default as CreditCardIcon,
  CropIcon_default as CropIcon,
  CrosshairIcon_default as CrosshairIcon,
  DatabaseIcon_default as DatabaseIcon,
  DeleteIcon_default as DeleteIcon,
  DiscIcon_default as DiscIcon,
  DivideCircleIcon_default as DivideCircleIcon,
  DivideIcon_default as DivideIcon,
  DivideSquareIcon_default as DivideSquareIcon,
  DollarSignIcon_default as DollarSignIcon,
  DownloadCloudIcon_default as DownloadCloudIcon,
  DownloadIcon_default as DownloadIcon,
  DribbbleIcon_default as DribbbleIcon,
  DropletIcon_default as DropletIcon,
  Edit2Icon_default as Edit2Icon,
  Edit3Icon_default as Edit3Icon,
  EditIcon_default as EditIcon,
  ExternalLinkIcon_default as ExternalLinkIcon,
  EyeIcon_default as EyeIcon,
  EyeOffIcon_default as EyeOffIcon,
  FacebookIcon_default as FacebookIcon,
  FastForwardIcon_default as FastForwardIcon,
  FeatherIcon_default as FeatherIcon,
  FigmaIcon_default as FigmaIcon,
  FileIcon_default as FileIcon,
  FileMinusIcon_default as FileMinusIcon,
  FilePlusIcon_default as FilePlusIcon,
  FileTextIcon_default as FileTextIcon,
  FilmIcon_default as FilmIcon,
  FilterIcon_default as FilterIcon,
  FlagIcon_default as FlagIcon,
  FolderIcon_default as FolderIcon,
  FolderMinusIcon_default as FolderMinusIcon,
  FolderPlusIcon_default as FolderPlusIcon,
  FramerIcon_default as FramerIcon,
  FrownIcon_default as FrownIcon,
  GiftIcon_default as GiftIcon,
  GitBranchIcon_default as GitBranchIcon,
  GitCommitIcon_default as GitCommitIcon,
  GitMergeIcon_default as GitMergeIcon,
  GitPullRequestIcon_default as GitPullRequestIcon,
  GithubIcon_default as GithubIcon,
  GitlabIcon_default as GitlabIcon,
  GlobeIcon_default as GlobeIcon,
  GridIcon_default as GridIcon,
  HardDriveIcon_default as HardDriveIcon,
  HashIcon_default as HashIcon,
  HeadphonesIcon_default as HeadphonesIcon,
  HeartIcon_default as HeartIcon,
  HelpCircleIcon_default as HelpCircleIcon,
  HexagonIcon_default as HexagonIcon,
  HomeIcon_default as HomeIcon,
  ImageIcon_default as ImageIcon,
  InboxIcon_default as InboxIcon,
  InfoIcon_default as InfoIcon,
  InstagramIcon_default as InstagramIcon,
  ItalicIcon_default as ItalicIcon,
  KeyIcon_default as KeyIcon,
  LayersIcon_default as LayersIcon,
  LayoutIcon_default as LayoutIcon,
  LifeBuoyIcon_default as LifeBuoyIcon,
  Link2Icon_default as Link2Icon,
  LinkIcon_default as LinkIcon,
  LinkedinIcon_default as LinkedinIcon,
  ListIcon_default as ListIcon,
  LoaderIcon_default as LoaderIcon,
  LockIcon_default as LockIcon,
  LogInIcon_default as LogInIcon,
  LogOutIcon_default as LogOutIcon,
  MailIcon_default as MailIcon,
  MapIcon_default as MapIcon,
  MapPinIcon_default as MapPinIcon,
  Maximize2Icon_default as Maximize2Icon,
  MaximizeIcon_default as MaximizeIcon,
  MehIcon_default as MehIcon,
  MenuIcon_default as MenuIcon,
  MessageCircleIcon_default as MessageCircleIcon,
  MessageSquareIcon_default as MessageSquareIcon,
  MicIcon_default as MicIcon,
  MicOffIcon_default as MicOffIcon,
  Minimize2Icon_default as Minimize2Icon,
  MinimizeIcon_default as MinimizeIcon,
  MinusCircleIcon_default as MinusCircleIcon,
  MinusIcon_default as MinusIcon,
  MinusSquareIcon_default as MinusSquareIcon,
  MonitorIcon_default as MonitorIcon,
  MoonIcon_default as MoonIcon,
  MoreHorizontalIcon_default as MoreHorizontalIcon,
  MoreVerticalIcon_default as MoreVerticalIcon,
  MousePointerIcon_default as MousePointerIcon,
  MoveIcon_default as MoveIcon,
  MusicIcon_default as MusicIcon,
  Navigation2Icon_default as Navigation2Icon,
  NavigationIcon_default as NavigationIcon,
  OctagonIcon_default as OctagonIcon,
  PackageIcon_default as PackageIcon,
  PaperclipIcon_default as PaperclipIcon,
  PauseCircleIcon_default as PauseCircleIcon,
  PauseIcon_default as PauseIcon,
  PenToolIcon_default as PenToolIcon,
  PercentIcon_default as PercentIcon,
  PhoneCallIcon_default as PhoneCallIcon,
  PhoneForwardedIcon_default as PhoneForwardedIcon,
  PhoneIcon_default as PhoneIcon,
  PhoneIncomingIcon_default as PhoneIncomingIcon,
  PhoneMissedIcon_default as PhoneMissedIcon,
  PhoneOffIcon_default as PhoneOffIcon,
  PhoneOutgoingIcon_default as PhoneOutgoingIcon,
  PieChartIcon_default as PieChartIcon,
  PlayCircleIcon_default as PlayCircleIcon,
  PlayIcon_default as PlayIcon,
  PlusCircleIcon_default as PlusCircleIcon,
  PlusIcon_default as PlusIcon,
  PlusSquareIcon_default as PlusSquareIcon,
  PocketIcon_default as PocketIcon,
  PowerIcon_default as PowerIcon,
  PrinterIcon_default as PrinterIcon,
  RadioIcon_default as RadioIcon,
  RefreshCcwIcon_default as RefreshCcwIcon,
  RefreshCwIcon_default as RefreshCwIcon,
  RepeatIcon_default as RepeatIcon,
  RewindIcon_default as RewindIcon,
  RotateCcwIcon_default as RotateCcwIcon,
  RotateCwIcon_default as RotateCwIcon,
  RssIcon_default as RssIcon,
  SaveIcon_default as SaveIcon,
  ScissorsIcon_default as ScissorsIcon,
  SearchIcon_default as SearchIcon,
  SendIcon_default as SendIcon,
  ServerIcon_default as ServerIcon,
  SettingsIcon_default as SettingsIcon,
  Share2Icon_default as Share2Icon,
  ShareIcon_default as ShareIcon,
  ShieldIcon_default as ShieldIcon,
  ShieldOffIcon_default as ShieldOffIcon,
  ShoppingBagIcon_default as ShoppingBagIcon,
  ShoppingCartIcon_default as ShoppingCartIcon,
  ShuffleIcon_default as ShuffleIcon,
  SidebarIcon_default as SidebarIcon,
  SkipBackIcon_default as SkipBackIcon,
  SkipForwardIcon_default as SkipForwardIcon,
  SlackIcon_default as SlackIcon,
  SlashIcon_default as SlashIcon,
  SlidersIcon_default as SlidersIcon,
  SmartphoneIcon_default as SmartphoneIcon,
  SmileIcon_default as SmileIcon,
  SpeakerIcon_default as SpeakerIcon,
  SquareIcon_default as SquareIcon,
  StarIcon_default as StarIcon,
  StopCircleIcon_default as StopCircleIcon,
  SunIcon_default as SunIcon,
  SunriseIcon_default as SunriseIcon,
  SunsetIcon_default as SunsetIcon,
  TableIcon_default as TableIcon,
  TabletIcon_default as TabletIcon,
  TagIcon_default as TagIcon,
  TargetIcon_default as TargetIcon,
  TerminalIcon_default as TerminalIcon,
  ThermometerIcon_default as ThermometerIcon,
  ThumbsDownIcon_default as ThumbsDownIcon,
  ThumbsUpIcon_default as ThumbsUpIcon,
  ToggleLeftIcon_default as ToggleLeftIcon,
  ToggleRightIcon_default as ToggleRightIcon,
  ToolIcon_default as ToolIcon,
  Trash2Icon_default as Trash2Icon,
  TrashIcon_default as TrashIcon,
  TrelloIcon_default as TrelloIcon,
  TrendingDownIcon_default as TrendingDownIcon,
  TrendingUpIcon_default as TrendingUpIcon,
  TriangleIcon_default as TriangleIcon,
  TruckIcon_default as TruckIcon,
  TvIcon_default as TvIcon,
  TwitchIcon_default as TwitchIcon,
  TwitterIcon_default as TwitterIcon,
  TypeIcon_default as TypeIcon,
  UmbrellaIcon_default as UmbrellaIcon,
  UnderlineIcon_default as UnderlineIcon,
  UnlockIcon_default as UnlockIcon,
  UploadCloudIcon_default as UploadCloudIcon,
  UploadIcon_default as UploadIcon,
  UserCheckIcon_default as UserCheckIcon,
  UserIcon_default as UserIcon,
  UserMinusIcon_default as UserMinusIcon,
  UserPlusIcon_default as UserPlusIcon,
  UserXIcon_default as UserXIcon,
  UsersIcon_default as UsersIcon,
  VideoIcon_default as VideoIcon,
  VideoOffIcon_default as VideoOffIcon,
  VoicemailIcon_default as VoicemailIcon,
  Volume1Icon_default as Volume1Icon,
  Volume2Icon_default as Volume2Icon,
  VolumeIcon_default as VolumeIcon,
  VolumeXIcon_default as VolumeXIcon,
  WatchIcon_default as WatchIcon,
  WifiIcon_default as WifiIcon,
  WifiOffIcon_default as WifiOffIcon,
  WindIcon_default as WindIcon,
  XCircleIcon_default as XCircleIcon,
  XIcon_default as XIcon,
  XOctagonIcon_default as XOctagonIcon,
  XSquareIcon_default as XSquareIcon,
  YoutubeIcon_default as YoutubeIcon,
  ZapIcon_default as ZapIcon,
  ZapOffIcon_default as ZapOffIcon,
  ZoomInIcon_default as ZoomInIcon,
  ZoomOutIcon_default as ZoomOutIcon
};
//# sourceMappingURL=svelte-feather-icons.js.map
